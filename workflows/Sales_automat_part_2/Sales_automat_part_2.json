{
  "createdAt": "2025-04-15T12:50:40.326Z",
  "updatedAt": "2025-04-18T06:44:14.000Z",
  "id": "llHyu5eJMTWgwI4S",
  "name": "Sales automat part 2",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "sales@rh-s.com",
          "mode": "list",
          "cachedResultName": "sales@rh-s.com"
        },
        "timeMin": "={{ $now.plus( {hours: 1, minutes: 30})  }}",
        "timeMax": "={{ $now }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -540,
        -200
      ],
      "id": "a56e7893-cbc7-4c4e-8676-c92ff13c3645",
      "name": "Google Calendar2",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "dCmWpdsYiSYHC7XA",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "triggerAtMinute": 30
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -840,
        -200
      ],
      "id": "ecee5b6a-5c6e-474d-9548-de4342eca840",
      "name": "Schedule Trigger1"
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "732698343951695963",
          "mode": "list",
          "cachedResultName": "Remote Helpers",
          "cachedResultUrl": "https://discord.com/channels/732698343951695963"
        },
        "sendTo": "user",
        "userId": {
          "__rl": true,
          "value": "910144676881903646",
          "mode": "id"
        },
        "content": "=Deepresearch of {{ $json.companyName }} :\n{{ $json.googleDocLink }}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        3340,
        -400
      ],
      "id": "e7ecb70a-a6ad-4cd3-b99f-58961a49d2ff",
      "name": "Nikolay",
      "webhookId": "0dd4c953-a86e-41eb-9258-01d9a011e87a",
      "credentials": {
        "discordBotApi": {
          "id": "ATASGOhmkeLExW1R",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "model": "google/gemma-3-4b-it:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1280,
        100
      ],
      "id": "6a5e320b-a769-471b-b4f8-f93ebef0a947",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "bAp7bln2GIj8yhFs",
          "name": "OpenRouter Dev account"
        }
      }
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "732698343951695963",
          "mode": "list",
          "cachedResultName": "Remote Helpers",
          "cachedResultUrl": "https://discord.com/channels/732698343951695963"
        },
        "sendTo": "user",
        "userId": {
          "__rl": true,
          "value": "910144676881903646",
          "mode": "id"
        },
        "content": "=Summary of deepresearch {{ $json.companyName }}: \n{{ $json.googleDocLink }}",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        3460,
        -80
      ],
      "id": "aee567af-051d-49ee-9aa2-c6182351e2a7",
      "name": "Nikolay1",
      "webhookId": "0dd4c953-a86e-41eb-9258-01d9a011e87a",
      "credentials": {
        "discordBotApi": {
          "id": "ATASGOhmkeLExW1R",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "732698343951695963",
          "mode": "list",
          "cachedResultName": "Remote Helpers",
          "cachedResultUrl": "https://discord.com/channels/732698343951695963"
        },
        "sendTo": "user",
        "userId": {
          "__rl": true,
          "value": "910144676881903646",
          "mode": "id"
        },
        "content": "={{ $json.joinedText }}",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        3540,
        -300
      ],
      "id": "8f7c5c07-62c7-4610-8e97-72d42d48171b",
      "name": "Nikolay2",
      "webhookId": "0dd4c953-a86e-41eb-9258-01d9a011e87a",
      "credentials": {
        "discordBotApi": {
          "id": "ATASGOhmkeLExW1R",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "content": "# Deep Research",
        "height": 260,
        "width": 1720,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1300,
        -480
      ],
      "id": "0f8afc02-40a0-4392-a999-2461e4698b4b",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# Short Deep Research\n",
        "height": 460,
        "width": 2080,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1240,
        -160
      ],
      "id": "aaf1954c-c828-4999-b353-b59796e8d59c",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "# Generation Deep Research",
        "height": 360,
        "width": 2000,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -880,
        -320
      ],
      "id": "457e18ed-9d29-489b-bc21-4c6bcf2287db",
      "name": "Sticky Note2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        40,
        -60
      ],
      "id": "f0d0c103-deae-43fc-afb5-c67f246e9c54",
      "name": "If summary does not contains Remote Helpers"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e699edf6-00f3-4023-a233-525130f62ff6",
              "leftValue": "{{ $json.summary }}",
              "rightValue": "Remote Helpers",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -300,
        -200
      ],
      "id": "53f93be4-44f4-4882-8b64-f64975279bec",
      "name": "If summary contains Remote Helpers"
    },
    {
      "parameters": {
        "functionCode": "// Функция для округления времени до ближайшего полчасового интервала (с использованием UTC)\n// Если минуты меньше 30, округляем до :30, иначе до начала следующего часа\nfunction getHalfHourBlockUTC(dateString) {\n  const dateObj = new Date(dateString);\n  if (isNaN(dateObj.getTime())) return \"\";\n  let hours = dateObj.getUTCHours();\n  const minutes = dateObj.getUTCMinutes();\n  \n  if (minutes < 30) {\n    return `${String(hours).padStart(2, '0')}:30`;\n  } else {\n    hours = hours + 1;\n    if (hours === 24) {\n      hours = 0;\n    }\n    return `${String(hours).padStart(2, '0')}:00`;\n  }\n}\n\n// Этап 1. Получаем все входящие элементы и проводим обработку полей summary, description и end\nconst items = $input.all();\n\n// Проверяем, что items – массив\nif (!Array.isArray(items)) {\n  throw new Error(\"Ожидался массив входящих элементов\");\n}\n\nconst tempResults = items.map(item => {\n  // Если структура не соответствует ожиданиям, пропускаем элемент\n  if (!item || !item.json) return null;\n  \n  const jsonData = item.json;\n  \n  // Извлекаем поля summary и description, остальные поля сохраняем в restFields\n  const summary = jsonData.summary || \"\";\n  const description = jsonData.description || \"Нет описания\";\n  \n  // Очищаем поле summary: удаляем подстроку \"- Remote Helpers\" (без учета регистра)\n  let cleanedSummary = summary.replace(/-\\s*Remote\\s*Helpers\\s*/gi, \"\").trim();\n  \n  // Получаем оригинальное время окончания из jsonData.end\n  let originalEnd = \"\";\n  if (jsonData.end) {\n    originalEnd = jsonData.end.dateTime || jsonData.end.date || \"\";\n  }\n  \n  // Форматируем время окончания в формате HH:MM (округление до ближайшего полчасового интервала)\n  const formattedTime = originalEnd ? getHalfHourBlockUTC(originalEnd) : \"\";\n  \n  // Формируем итоговый объект.\n  // Сохраняем оригинальное время окончания (_originalEnd) для фильтрации и сортировки.\n  const finalData = {\n    ...jsonData,\n    summary: cleanedSummary,\n    description: description,\n    formattedTime: formattedTime,  // переименованное значение end\n    _originalEnd: originalEnd\n  };\n  \n  return { json: finalData };\n})\n// Фильтруем элементы, у которых не удалось сформировать объект\n.filter(item => item !== null);\n\n// Этап 2. Фильтрация дубликатов с использованием комбинации summary и округленного времени (UTC)\n// Используем _originalEnd для определения уникальности\nconst seenKeys = new Set();\nconst uniqueResults = tempResults.filter(item => {\n  const currentSummary = item.json.summary;\n  const originalEndTime = item.json._originalEnd;\n  \n  // Если время окончания задано, округляем его по UTC, иначе оставляем пустую строку\n  const normalizedTime = originalEndTime ? getHalfHourBlockUTC(originalEndTime) : \"\";\n  \n  // Если у события есть уникальный id, используем его; иначе – комбинацию summary и нормализованного времени\n  const uniqueId = item.json.id;\n  const dedupKey = uniqueId ? uniqueId : `${currentSummary}__${normalizedTime}`;\n  \n  if (seenKeys.has(dedupKey)) {\n    return false;\n  } else {\n    seenKeys.add(dedupKey);\n    return true;\n  }\n});\n\n// Этап 3. Сортировка по оригинальному времени окончания (используя _originalEnd)\nuniqueResults.sort((a, b) => {\n  const timeA = new Date(a.json._originalEnd);\n  const timeB = new Date(b.json._originalEnd);\n  return timeA - timeB;\n});\n\n// Удаляем вспомогательное поле _originalEnd из финального вывода\nconst finalResults = uniqueResults.map(item => {\n  delete item.json._originalEnd;\n  return item;\n});\n\n// Возвращаем итоговый массив уникальных, отсортированных по времени окончания\nreturn finalResults;\n"
      },
      "name": "Prepares and sorts unique events",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        40,
        -220
      ],
      "id": "fb3acffd-d89d-4fad-946a-0c164dd0adcb"
    },
    {
      "parameters": {
        "jsCode": "// Получаем HTML-текст из предыдущей ноды\nlet description = $input.first().json.description;\n\n// Массив для хранения результатов с URL и датой\nlet records = [];\n\n// Обновлённое регулярное выражение, которое ищет блок \"Company website:\" и затем либо тег <a href=\"...\">, либо прямую ссылку (http/https)\nconst regex = /<b>\\s*Company website:\\s*<\\/b>\\s*(?:<a\\s+href=\"([^\"]+)\"|((?:https?:\\/\\/)[^\\s<]+))/gi;\n\n// Регулярное выражение для поиска даты в формате \"YYYY-MM-DD\"\n// Если у вас формат даты другой, замените регулярное выражение на подходящий\nconst dateRegex = /(\\d{4}-\\d{2}-\\d{2})/;\n\nlet match;\nwhile ((match = regex.exec(description)) !== null) {\n  // Если группа 1 существует, значит ссылка взята из тега <a>, иначе из группы 2 — из plain-текста\n  let href = match[1] || match[2];\n  let outputUrl = href;\n  \n  // Если ссылка проходит через редирект Google, извлекаем значение параметра q\n  const googleRegex = /https:\\/\\/www\\.google\\.com\\/url\\?q=([^&]+)/i;\n  const googleMatch = href.match(googleRegex);\n  if (googleMatch) {\n    outputUrl = googleMatch[1];\n  }\n  \n  // Извлекаем дату из текста, прилегающего к найденному блоку.\n  // Здесь берём 200 символов начиная с позиции совпадения.\n  let context = description.slice(match.index, match.index + 200);\n  let dateMatch = dateRegex.exec(context);\n  let dateObj = dateMatch ? new Date(dateMatch[1]) : null;\n  \n  // Добавляем объект с URL и датой в массив результатов\n  records.push({ url: outputUrl, date: dateObj });\n}\n\n// Если записей не найдено, возвращаем объект с сообщением (чтобы всегда возвращались данные)\nif (records.length === 0) {\n  return [ { json: { message: \"No matching records found\" } } ];\n}\n\nlet now = new Date();\n\n// Фильтруем записи, у которых есть корректная дата\nlet recordsWithDate = records.filter(r => r.date !== null);\n\n// Если ни у одной записи нет даты, возвращаем первую найденную запись\nif (recordsWithDate.length === 0) {\n  return [ { json: records[0] } ];\n}\n\n// Находим запись, дата которой по абсолютной разнице с текущей датой минимальна\nlet closestRecord = recordsWithDate.reduce((prev, curr) => {\n  let prevDiff = Math.abs(now - prev.date);\n  let currDiff = Math.abs(now - curr.date);\n  return currDiff < prevDiff ? curr : prev;\n});\n\n// Возвращаем результат, обернутый в объект json\nreturn [ { json: closestRecord } ];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        280,
        -220
      ],
      "id": "81cc3fb9-5303-428d-b368-1c2efb69b388",
      "name": "Finds company website and closest date"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://hook.eu2.make.com/ha0xladgffsp156aqzplnmlxwx8iq5np",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "message",
              "value": "=Conduct a detailed and in-depth research of the company at the address {{ $json.url }} using open sources and marketing analysis to find job postings, check the company's status (active/inactive, financial situation, news), find out when the website was last updated, check the date of the last publication on social media, establish the industry affiliation, and evaluate online activity; based on the information obtained, create a personalized commercial offer for this company, focusing on the fact that our company, Remote Helpers, offers highly qualified remote employees for IT and digital marketing, with a special emphasis on skills in the field of AI (development, use of AI tools, data analysis using AI), which includes a full recruitment, training, and management cycle with flexible employment options (full-time/part-time, project solutions) through modern tools and corporate culture support, while not disclosing confidential information.\n\nPlease provide me output only with extracted information in structured format, without \"okay i need, i will give you or something else\"\n\nStart answer from \"company name\""
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        520,
        -220
      ],
      "id": "f353fe06-886f-410a-9b65-fa99383f69d4",
      "name": "HTTP Request to make.com"
    },
    {
      "parameters": {
        "jsCode": "function cleanText(inputText) {\n  if (typeof inputText !== 'string') {\n    // В реальной среде автоматизации лучше выбрасывать ошибку\n    // throw new Error(\"Input must be a string.\");\n    console.error(\"Input must be a string.\");\n    return ''; // Возвращаем пустую строку в случае ошибки типа\n  }\n  const thinkTagRegex = /<think>.*?<\\/think>/gs;\n  let cleanedText = inputText.replace(thinkTagRegex, '');\n  const bracketNumberRegex = /\\[\\d+\\]/g;\n  cleanedText = cleanedText.replace(bracketNumberRegex, '');\n  return cleanedText;\n}\n\n/**\n * Cleans the input text and structures the result as an array of objects,\n * where each object represents a non-empty line from the cleaned text.\n * (Без изменений)\n * @param {string} inputText The original string with think tags and bracketed numbers.\n * @returns {Array<object>} An array of objects, e.g., [{ id: 0, lineContent: \"...\" }, ...].\n */\nfunction cleanAndStructureOutput(inputText) {\n  const cleanedFullText = cleanText(inputText);\n  const lines = cleanedFullText.split('\\n');\n  const outputArray = [];\n  let idCounter = 0;\n  for (const line of lines) {\n    const trimmedLine = line.trim();\n    if (trimmedLine !== '') {\n      outputArray.push({\n        id: idCounter++,\n        lineContent: trimmedLine\n      });\n    }\n  }\n  return outputArray;\n}\n\nconst text = $input.first().json.data; // Или $input[0].json.data в стандартном JS\nconst result = cleanAndStructureOutput(text);\nreturn result;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        740,
        -220
      ],
      "id": "4f7e7128-0300-4a76-b126-09cef9a52dc4",
      "name": "Cleans text and splits into lines"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst joinedText = items.map(item => item.json.lineContent).join('\\n');\nreturn [{ json: { joinedText } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        960,
        -220
      ],
      "id": "e7cd8f6b-decf-4bce-a9fb-bc58ff7ae33e",
      "name": "Joins lines into single text"
    },
    {
      "parameters": {
        "jsCode": "// Получаем текст из входящего JSON\nconst text = $input.first().json.joinedText;\n\n// Регулярное выражение для извлечения названия компании\nconst regex = /^\\*\\*company name\\*\\*: ([^\\n]+)\\n/;\nconst match = text.match(regex);\nconst companyName = match ? match[1].trim() : \"\";\n\n// Возвращаем объект с двумя полями: название компании и полный текст\nreturn { json: { companyName, fullText: text } };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1360,
        -380
      ],
      "id": "03c5e15f-43e4-48b7-b94c-2c613df17068",
      "name": "Extracts company name from text"
    },
    {
      "parameters": {
        "operation": "createFromText",
        "content": "={{ $json.fullText }}",
        "name": "={{ $json.companyName }} - deep research",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "https://drive.google.com/drive/folders/1eQ-7TJMXx1Yn7_1f7EikuL5DU8LKALU1",
          "mode": "url"
        },
        "options": {
          "convertToGoogleDocument": true
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1740,
        -380
      ],
      "id": "e970e91e-e318-47bd-900c-c1c825be8922",
      "name": "Add Deep Reseach to the Google Drive",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "FVL3R6UcDkQOqfdz",
          "name": "n8n Sales Google Drive"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем значение id из первого элемента входящих данных\nconst id = $input.first().json.id;\n\n// Формируем ссылку на Google Документ, подставляя id\nconst googleDocLink = `https://docs.google.com/document/d/${id}`;\n\n// Возвращаем объект с новым полем, содержащим ссылку на документ\nreturn [\n  {\n    json: {\n      id: id,\n      googleDocLink: googleDocLink,\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        -380
      ],
      "id": "ac9938cd-618a-4ef6-baa8-ffa373e4373b",
      "name": "Generates Google Document link"
    },
    {
      "parameters": {
        "jsCode": "for (const item of $input.all()) {\n  // Получаем контент из входящих данных\n  const content = item.json.content || \"\";\n  \n  // Используем регулярное выражение для поиска текста после \"**company name**:\"\n  // - \\*\\*company name\\*\\* ищет буквальное \"**company name**:\" (без учёта регистра благодаря флагу i)\n  // - \\s* — допускает наличие пробелов после двоеточия\n  // - ([^\\n]+) — захватывает все символы до первого переноса строки, то есть само название компании\n  const match = content.match(/\\*\\*company name\\*\\*:\\s*([^\\n]+)/i);\n  const companyName = match ? match[1].trim() : \"Not found\";\n  \n  // Превращаем documentId в ссылку на Google Документ\n  const docId = item.json.documentId || \"\";\n  const googleDocLink = docId ? `https://docs.google.com/document/d/${docId}` : \"\";\n  \n  // Формируем поля для вывода:\n  // - companyName: извлечённое название компании\n  // - fullText: исходный текст\n  // - googleDocLink: полноценная ссылка на Google Документ\n  item.json.companyName = companyName;\n  item.json.fullText = content;\n  item.json.googleDocLink = googleDocLink;\n}\n\nreturn $input.all();\n"
      },
      "name": "Extracts company name and link",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2540,
        -380
      ],
      "id": "f035b939-8ab2-46ba-b664-c42ce2a46e54"
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "732698343951695963",
          "mode": "list",
          "cachedResultName": "Remote Helpers",
          "cachedResultUrl": "https://discord.com/channels/732698343951695963"
        },
        "channelId": {
          "__rl": true,
          "value": "1285235052615176263",
          "mode": "id"
        },
        "content": "=Deepresearch of {{ $json.companyName }} :\n{{ $json.googleDocLink }}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        2780,
        -380
      ],
      "id": "62e68fa7-e775-484e-924f-fd4bedc0db31",
      "name": "Sent Deep Research to Sales Comment chat",
      "webhookId": "0dd4c953-a86e-41eb-9258-01d9a011e87a",
      "credentials": {
        "discordBotApi": {
          "id": "ATASGOhmkeLExW1R",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Сделай краткую выжимку (summary) из этого текста {{ $json.joinedText }} сохранив все самое важное для сейлзов\n\nPlease provide me output only with extracted information in structured format, without \"okay i need, i will give you or something else\"\n\nStart summary from \"Company name: \""
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        1340,
        -20
      ],
      "id": "1a701696-6638-444e-8eb5-de12f45df77f",
      "name": "Making Short Deep Research"
    },
    {
      "parameters": {
        "jsCode": "// Обрабатываем все входящие элементы\nfor (const item of $input.all()) {\n  // Извлекаем текст\n  const text = item.json.text || '';\n\n  // С помощью RegExp ищем строку: \"Company Name: ....\"\n  const companyNameMatch = text.match(/Company Name:\\s*(.*)/i);\n  const companyName = companyNameMatch ? companyNameMatch[1].trim() : 'Not found';\n\n  // Добавляем в текущий элемент два новых поля:\n  // 1) companyName — название компании\n  // 2) fullText — исходный текст\n  item.json.companyName = companyName;\n  item.json.fullText = text;\n}\n\n// Возвращаем все обработанные элементы\nreturn $input.all();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1760,
        -20
      ],
      "id": "f7da6408-15c7-4208-8f60-89cd3c15ace4",
      "name": "Finds company name in text"
    },
    {
      "parameters": {
        "operation": "createFromText",
        "content": "={{ $json.text }}",
        "name": "={{ $json.companyName }}  - short deep research",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "https://drive.google.com/drive/folders/1X60VTZuBRmxan6w6cuvtRsZXRL8cC3E0",
          "mode": "url"
        },
        "options": {
          "convertToGoogleDocument": true
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        2020,
        -20
      ],
      "id": "d7340ff0-b0b0-4cfe-abca-2902baa885e7",
      "name": "Add Short Deep Reseach to the Google Drive",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "FVL3R6UcDkQOqfdz",
          "name": "n8n Sales Google Drive"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем значение id из первого элемента входящих данных\nconst id = $input.first().json.id;\n\n// Формируем ссылку на Google Документ, подставляя id\nconst googleDocLink = `https://docs.google.com/document/d/${id}`;\n\n// Возвращаем объект с новым полем, содержащим ссылку на документ\nreturn [\n  {\n    json: {\n      id: id,\n      googleDocLink: googleDocLink,\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2280,
        -20
      ],
      "id": "7ef04883-564d-4888-8b95-93aa61a1e314",
      "name": "Builds document link using ID"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "get",
        "documentURL": "={{ $json.id }}"
      },
      "name": "Get Google Doc DR Metadata",
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 1,
      "position": [
        2260,
        -380
      ],
      "id": "d604f773-3289-4152-9e3a-fd845b39c65c",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "UGRtdL18RWBWUBkv",
          "name": "Google Docs Sales API"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "get",
        "documentURL": "={{ $json.id }}"
      },
      "name": "Get Google Doc SDR Metadata",
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 1,
      "position": [
        2540,
        -20
      ],
      "id": "dc7a4371-f590-4990-b24b-a121801e5aab",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "UGRtdL18RWBWUBkv",
          "name": "Google Docs Sales API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items\nfor (const item of $input.all()) {\n  // Достаём documentId и формируем полную ссылку\n  const docId = item.json.documentId;\n  const googleDocLink = `https://docs.google.com/document/d/${docId}`;\n\n  // Достаём content и ищем в нём Company Name\n  const content = item.json.content || '';\n  // С помощью RegExp ищем строку: \"Company Name: ....\"\n  const companyNameMatch = content.match(/Company name: \\s*(.*)/i);\n  const companyName = companyNameMatch ? companyNameMatch[1].trim() : 'Not found';\n\n  // Добавляем новые поля к исходным данным\n  item.json.googleDocLink = googleDocLink;\n  item.json.companyName = companyName;\n}\n\nreturn $input.all();\n"
      },
      "name": "Adds link and company name",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2820,
        -20
      ],
      "id": "f47840dd-acb9-4cea-a3e9-48abd01d5cf2"
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "732698343951695963",
          "mode": "list",
          "cachedResultName": "Remote Helpers",
          "cachedResultUrl": "https://discord.com/channels/732698343951695963"
        },
        "channelId": {
          "__rl": true,
          "value": "1285235052615176263",
          "mode": "id"
        },
        "content": "=Summary of deepresearch {{ $json.companyName }}: \n{{ $json.googleDocLink }}",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        3060,
        -20
      ],
      "id": "7b42f9c2-8609-4da4-968b-b35c92a7bd79",
      "name": "Sent Short Deep Research to Sales Comment chat",
      "webhookId": "0dd4c953-a86e-41eb-9258-01d9a011e87a",
      "credentials": {
        "discordBotApi": {
          "id": "ATASGOhmkeLExW1R",
          "name": "Discord Bot account"
        }
      }
    }
  ],
  "connections": {
    "Google Calendar2": {
      "main": [
        [
          {
            "node": "If summary contains Remote Helpers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger1": {
      "main": [
        [
          {
            "node": "Google Calendar2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Making Short Deep Research",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If summary contains Remote Helpers": {
      "main": [
        [
          {
            "node": "Prepares and sorts unique events",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If summary does not contains Remote Helpers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepares and sorts unique events": {
      "main": [
        [
          {
            "node": "Finds company website and closest date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Finds company website and closest date": {
      "main": [
        [
          {
            "node": "HTTP Request to make.com",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request to make.com": {
      "main": [
        [
          {
            "node": "Cleans text and splits into lines",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cleans text and splits into lines": {
      "main": [
        [
          {
            "node": "Joins lines into single text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Joins lines into single text": {
      "main": [
        [
          {
            "node": "Making Short Deep Research",
            "type": "main",
            "index": 0
          },
          {
            "node": "Extracts company name from text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extracts company name from text": {
      "main": [
        [
          {
            "node": "Add Deep Reseach to the Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Deep Reseach to the Google Drive": {
      "main": [
        [
          {
            "node": "Generates Google Document link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generates Google Document link": {
      "main": [
        [
          {
            "node": "Get Google Doc DR Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extracts company name and link": {
      "main": [
        [
          {
            "node": "Sent Deep Research to Sales Comment chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Making Short Deep Research": {
      "main": [
        [
          {
            "node": "Finds company name in text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Finds company name in text": {
      "main": [
        [
          {
            "node": "Add Short Deep Reseach to the Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Short Deep Reseach to the Google Drive": {
      "main": [
        [
          {
            "node": "Builds document link using ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Builds document link using ID": {
      "main": [
        [
          {
            "node": "Get Google Doc SDR Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Google Doc DR Metadata": {
      "main": [
        [
          {
            "node": "Extracts company name and link",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Google Doc SDR Metadata": {
      "main": [
        [
          {
            "node": "Adds link and company name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Adds link and company name": {
      "main": [
        [
          {
            "node": "Sent Short Deep Research to Sales Comment chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "3dc6f804-ced3-47ad-997c-2ad7fe723b13",
  "triggerCount": 0,
  "tags": [
    {
      "createdAt": "2025-03-17T12:52:07.245Z",
      "updatedAt": "2025-03-17T12:52:07.245Z",
      "id": "8gQGu3wLTaddTC1B",
      "name": "report"
    },
    {
      "createdAt": "2025-04-11T07:25:18.150Z",
      "updatedAt": "2025-04-11T07:25:18.150Z",
      "id": "F4yBYHrbQwB5aiFj",
      "name": "Sales"
    }
  ]
}