{
  "createdAt": "2025-05-12T11:53:36.924Z",
  "updatedAt": "2025-05-14T20:46:45.000Z",
  "id": "rjpOU7vUD96M6yDC",
  "name": "N8n-Notion Task Management Automation (read)",
  "active": false,
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -220,
        60
      ],
      "id": "9c5a4f16-7ecd-4841-a226-58c0affff4e8",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        420,
        60
      ],
      "id": "9738904f-c47b-4251-8b26-3aa39d68f92c",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "/**\n * Рекурсивно находит все строковые значения полей \"content\"\n */\nfunction findContent(obj, contentValues) {\n  if (obj && typeof obj === 'object') {\n    if (Array.isArray(obj)) {\n      for (const el of obj) {\n        findContent(el, contentValues);\n      }\n    } else {\n      for (const [key, val] of Object.entries(obj)) {\n        if (key === 'content' && typeof val === 'string') {\n          contentValues.push(val);\n        } else {\n          findContent(val, contentValues);\n        }\n      }\n    }\n  }\n}\n\n// 1. Берём входящий блок\nconst data = item.json;\n\n// 2. Собираем все вхождения \"content\"\nconst contentValues = [];\nfindContent(data, contentValues);\n\n// 3. Формируем текст или null\nconst text = contentValues.length ? contentValues.join(' | ') : null;\n\n// 4. **Очень важно** — вернуть один объект, а не массив\nreturn {\n  json: { text }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1040,
        120
      ],
      "id": "400f42d2-d844-4c1d-b295-d5a4e3724a52",
      "name": "Parse Notion Block"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      texts: items.map(item => item.json.text).filter(t => t !== null && t !== undefined)\n    }\n  }\n]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        -40
      ],
      "id": "d46e4cdb-1fd5-4686-80ac-99a0d7b90b85",
      "name": "Build Text Array"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "1f1b16a314518096935fd8e1836183de",
          "mode": "id"
        },
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        80,
        60
      ],
      "id": "2d910400-eea2-4780-8612-8eb893797b29",
      "name": "Notion: Get all inside blocks by ID",
      "credentials": {
        "notionApi": {
          "id": "tOaND2east20Zsvy",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Ты — помощник по извлечению текста из JSON.  \nТебе на вход даётся один JSON-объект. Твоя задача — найти во всём объекте (рекурсивно) все поля с ключом `\"content\"` и собрать их значения (строки) в одну строку, разделив их через `\" | \"`.  \n\nПотом **нужно вывести ровно один JSON** вида:\n```json\n{\n  \"text\": \"<полученная строка или null>\"\n}\nОбъект: {{ $json }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        860,
        540
      ],
      "id": "fe823f4d-5341-4d7b-8eea-b930efe9f40e",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "google/gemma-3-27b-it",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        860,
        760
      ],
      "id": "eed01233-057b-403d-94fd-246baf18c710",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "xM1Kdr0j4QvJ4iaw",
          "name": "AdminN8N"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.content}}",
                    "rightValue": "\"hasContent\"",
                    "operator": {
                      "type": "string",
                      "operation": "notEmpty",
                      "singleValue": true
                    },
                    "id": "37080e0d-ac51-454f-b45d-ee24e7324a14"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "hasContent"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0b282c9e-220a-4db8-987a-fd9f63ede679",
                    "leftValue": "={{$json.content}}",
                    "rightValue": "\"noContent\"",
                    "operator": {
                      "type": "string",
                      "operation": "empty",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "noContent"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        480,
        520
      ],
      "id": "e675dc1f-7bac-46bc-a81a-77b7cde2cdb1",
      "name": "Switch"
    },
    {
      "parameters": {
        "functionCode": "// 1. Получаем сырое содержимое (строку с кодом и JSON-объектом)\nconst raw = item.json.output || '';\n\n// 2. Находим в строке границы JSON-объекта\nconst start = raw.indexOf('{');\nconst end   = raw.lastIndexOf('}');\n\n// 3. Парсим только ту часть, что между первой «{» и последней «}»\nlet parsed = {};\nif (start !== -1 && end !== -1 && end > start) {\n  const jsonPart = raw.slice(start, end + 1);\n  try {\n    parsed = JSON.parse(jsonPart);\n  } catch (e) {\n    // Если не удалось распарсить — остаёмся с пустым parsed\n    parsed = {};\n  }\n}\n\n// 4. Берём поле text или null по умолчанию\nconst text = parsed.text ?? null;\n\n// 5. Возвращаем нужный формат\nreturn [\n  {\n    json: { text }\n  }\n];\n"
      },
      "id": "b2c11f19-5888-4b30-a5b8-7e45e62c40dc",
      "name": "Parse LLM JSON",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1220,
        540
      ]
    }
  ],
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Notion: Get all inside blocks by ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Build Text Array",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Parse Notion Block",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Notion Block": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notion: Get all inside blocks by ID": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Parse LLM JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse LLM JSON": {
      "main": [
        []
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "c2313397-af7f-411c-880e-a4e25372d3bd",
  "triggerCount": 0,
  "tags": []
}