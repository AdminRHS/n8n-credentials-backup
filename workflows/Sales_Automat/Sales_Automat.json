{
  "createdAt": "2025-04-09T11:11:33.733Z",
  "updatedAt": "2025-05-20T13:47:07.000Z",
  "id": "pQNEGi3yfeUhmfcn",
  "name": "Sales Automat",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "model": "google/gemma-3-27b-it",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        3860,
        1780
      ],
      "id": "0ec262dc-e3c4-425e-b272-65386def20db",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "xM1Kdr0j4QvJ4iaw",
          "name": "AdminN8N"
        }
      }
    },
    {
      "parameters": {
        "model": "google/gemma-3-27b-it",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        780,
        1460
      ],
      "id": "92888f06-62c5-42d0-a15a-1576f0201b54",
      "name": "OpenRouter Chat Model2",
      "credentials": {
        "openRouterApi": {
          "id": "xM1Kdr0j4QvJ4iaw",
          "name": "AdminN8N"
        }
      }
    },
    {
      "parameters": {
        "content": "# Sales Workflow\n# This workflow automates data processing from various sources, including Gmail, Google Calendar, Google Sheets, and Google Docs. It gathers information \n# from emails, calendar events, and documents, processes it using a language model (LLM), then updates Google Sheets and sends a message to Discord.\n",
        "height": 1900,
        "width": 7020,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -480,
        220
      ],
      "id": "a868f1a9-bc78-43a9-9329-cb5bab3e319a",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "732698343951695963",
          "mode": "list",
          "cachedResultName": "Remote Helpers",
          "cachedResultUrl": "https://discord.com/channels/732698343951695963"
        },
        "channelId": {
          "__rl": true,
          "value": "1121723393469845555",
          "mode": "id"
        },
        "content": "={{ $json.text }}",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        6620,
        1780
      ],
      "id": "6fa31f33-b0d9-49c8-b188-57d5673b3cb6",
      "name": "AI FM",
      "webhookId": "0dd4c953-a86e-41eb-9258-01d9a011e87a",
      "credentials": {
        "discordBotApi": {
          "id": "ATASGOhmkeLExW1R",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "model": "google/gemma-3-27b-it",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        3860,
        1940
      ],
      "id": "7e106b65-5554-4770-bfbb-f228a527a44c",
      "name": "OpenRouter Chat Model3",
      "credentials": {
        "openRouterApi": {
          "id": "xM1Kdr0j4QvJ4iaw",
          "name": "AdminN8N"
        }
      }
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "732698343951695963",
          "mode": "list",
          "cachedResultName": "Remote Helpers",
          "cachedResultUrl": "https://discord.com/channels/732698343951695963"
        },
        "sendTo": "user",
        "userId": {
          "__rl": true,
          "value": "707137679971844176",
          "mode": "id"
        },
        "content": "={{ $json.joinedText }}",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        6780,
        1780
      ],
      "id": "4f28b797-84f6-42e5-a07b-bcc461358bb9",
      "name": "Sabina",
      "webhookId": "0dd4c953-a86e-41eb-9258-01d9a011e87a",
      "credentials": {
        "discordBotApi": {
          "id": "ATASGOhmkeLExW1R",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=find in the Call Transcription information, about Immediate Requirement, Professional Skills, Software, Responsibilities, Future Needs, Status by the position(s) (possible/impossible), Next Step, Next Contact Day and Planned Start Date.\n\n**If, and ONLY if, a specific piece of information for a field is DIRECTLY MENTIONED in the Call Transcription, then extract it and write it under the corresponding field in the template.**\n\n**If a field's information is NOT mentioned at all in the Call Transcription, then leave that entire field in the template COMPLETELY EMPTY.** This means you should write the field name followed by a colon, and then **immediately insert two newline characters (effectively leaving a blank line after the field name).  Do NOT write anything else like \"(None mentioned)\", \"(Not specified)\", or any explanatory text.  Just leave it blank.**\n\nExtract information **EXACTLY as it appears** in the following call transcription and fill in the report template below.  **Do not infer, assume, or add any information that is not explicitly present in the transcription.**\n\nSome remarks to guide you:\n* \"Software: \" - If there is **no mention** of any software in the transcription, leave this field **completely empty**.\n* \"Responsibilities: \" -  If responsibilities are mentioned, write them as bullet points using the exact wording from the transcription. If **no responsibilities are mentioned**, leave this field **completely empty**.\n* \"Future Needs: \" - If future needs are explicitly mentioned, extract them. If **no future needs are mentioned**, leave this field **completely empty**.\n* \"Status by the position(s) (possible/impossible): \" - If the status of the position is mentioned, extract it. If **no status is mentioned**, leave this field **completely empty**.\n* \"Next Contact Day: \" - If a next contact day is mentioned, extract it. If **no next contact day is mentioned**, leave this field **completely empty**.\n* \"Planned Start Date: \" - If a planned start date is mentioned, extract it. If **no planned start date is mentioned**, leave this field **completely empty**.\n\n\nCall Transcription:\n{{ $json['Extracred Text'] }}\n\nfill information here\n\nImmediate Requirement:\n\nProfessional Skills:\n\nSoftware:\n\nResponsibilities:\n\nFuture Needs:\n\nStatus by the position(s) (possible/impossible): \n\nNext Step:\n\nNext Contact Day:\n\nPlanned Start Date:\n\nFormat the answer exactly according to the template.  For fields with information, leave an empty line between the field name and the value (or the first bullet point for Responsibilities). For fields with NO information from the transcription, leave a **completely empty line** after the field name and colon."
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        3960,
        1920
      ],
      "id": "e41cbd26-e6e2-418c-8ba8-a949362fb0b1",
      "name": "Usefull information about client"
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "732698343951695963",
          "mode": "list",
          "cachedResultName": "Remote Helpers",
          "cachedResultUrl": "https://discord.com/channels/732698343951695963"
        },
        "sendTo": "user",
        "userId": {
          "__rl": true,
          "value": "454595558779387904",
          "mode": "id"
        },
        "content": "=Report after call with company {{ $json.companyName }}:\n{{ $json.googleDocLink }}",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        7160,
        1780
      ],
      "id": "938f4131-14f5-4c2c-933a-ca08ee18abd5",
      "name": "Danylo",
      "webhookId": "0dd4c953-a86e-41eb-9258-01d9a011e87a",
      "credentials": {
        "discordBotApi": {
          "id": "ATASGOhmkeLExW1R",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b533dfaa-055a-4ff3-8ee3-ec01e2648ade",
              "leftValue": "={{ $json.meetingName }}",
              "rightValue": "Interview",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1320,
        420
      ],
      "id": "249760f2-d4bf-4116-912a-ceb3c34ca89d",
      "name": "If2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b533dfaa-055a-4ff3-8ee3-ec01e2648ade",
              "leftValue": "={{ $json.meetingName }}",
              "rightValue": "Second",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1320,
        580
      ],
      "id": "7e05be5c-0124-4b32-9cc0-3be6f271af3d",
      "name": "If3"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1080,
        420
      ],
      "id": "919e9c42-d450-4b21-a4cf-1c7560b356ad",
      "name": "If Formatted Data is empty ->"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1580,
        400
      ],
      "id": "f3b7981b-8646-44c8-b2ce-444eeb882428",
      "name": "If meeting name contains Interview"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1580,
        560
      ],
      "id": "d7c59227-89ad-4630-8007-aeea8e9521fe",
      "name": "If meeting name contains Second call"
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "732698343951695963",
          "mode": "list",
          "cachedResultName": "Remote Helpers",
          "cachedResultUrl": "https://discord.com/channels/732698343951695963"
        },
        "sendTo": "user",
        "userId": {
          "__rl": true,
          "value": "910144676881903646",
          "mode": "id"
        },
        "content": "=Report after call with company {{ $json.companyName }}:\n{{ $json.googleDocLink }}",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        7400,
        1800
      ],
      "id": "498cb2d5-65e2-4148-9b45-3ecc359f9e63",
      "name": "Nikolay",
      "webhookId": "0dd4c953-a86e-41eb-9258-01d9a011e87a",
      "credentials": {
        "discordBotApi": {
          "id": "ATASGOhmkeLExW1R",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "732698343951695963",
          "mode": "list",
          "cachedResultName": "Remote Helpers",
          "cachedResultUrl": "https://discord.com/channels/732698343951695963"
        },
        "sendTo": "user",
        "userId": {
          "__rl": true,
          "value": "1080887161169117214",
          "mode": "id"
        },
        "content": "=Вот так выглядит отчет, который делает AI через n8n(этой строчки не будет)\n\nReport after call with company {{ $json.companyName }}:\n{{ $json.googleDocLink }}",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        6960,
        1780
      ],
      "id": "4f0b6d2a-57d7-40c4-a156-f1ea5ca682bb",
      "name": "Niko",
      "webhookId": "0dd4c953-a86e-41eb-9258-01d9a011e87a",
      "credentials": {
        "discordBotApi": {
          "id": "ATASGOhmkeLExW1R",
          "name": "Discord Bot account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b533dfaa-055a-4ff3-8ee3-ec01e2648ade",
              "leftValue": "={{ $json.meetingName }}",
              "rightValue": "follow up",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "98a2d381-11ee-4edd-af9c-37ec9757aa4a",
              "leftValue": "={{ $json.meetingName }}",
              "rightValue": "Follow up",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "0b9e5032-cc14-4a21-9f9d-92bef23f01cc",
              "leftValue": "={{ $json.meetingName }}",
              "rightValue": "follow-up",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "2fef4ca3-3ae6-4e0d-b3db-578d02889253",
              "leftValue": "={{ $json.meetingName }}",
              "rightValue": "Follow-up",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1320,
        740
      ],
      "id": "aa10b392-200c-4862-9b24-efe7940794c0",
      "name": "If"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1580,
        720
      ],
      "id": "c1b1f7d4-3b48-488e-ae8b-126188703a3f",
      "name": "If meeting name contains follow up"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.summary }}",
                    "rightValue": "follow up",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "id": "fa8905e1-a499-4ba5-a254-57c771ae6d28"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4b9b0468-16d2-4f17-9949-4640df767945",
                    "leftValue": "={{ $json.summary }}",
                    "rightValue": "Interview",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d4fbb5c1-8980-4629-818e-1eb70143bdc4",
                    "leftValue": "={{ $json.summary }}",
                    "rightValue": "Second Call",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "69caa1da-df63-4959-b5d7-30ace85c00d6",
                    "leftValue": "={{ $json.summary }}",
                    "rightValue": "Intro call",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2a4b0d0b-2baf-4ce6-a892-b872fa4a163b",
                    "leftValue": "={{ $json.summary }}",
                    "rightValue": "Introductory",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7bfbe3f1-6158-48ff-8068-b2aa5df03db7",
                    "leftValue": "={{ $json.summary }}",
                    "rightValue": "Kick off meeting",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "084fd611-db5d-47bd-90ea-2f9e1df21717",
                    "leftValue": "={{ $json.meetingName }}",
                    "rightValue": "Remote Helpers",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2000,
        1000
      ],
      "id": "99123d5d-09a6-4454-95eb-c6a5c0b82c9c",
      "name": "Switch"
    },
    {
      "parameters": {
        "model": "google/gemma-3-4b-it:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        3820,
        360
      ],
      "id": "8dd3d7cb-23c7-43ab-89be-422da708e60d",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "WrcI4NDeH0Hyl0Z2",
          "name": "OpenRouter DD account"
        }
      }
    },
    {
      "parameters": {
        "model": "google/gemma-3-4b-it:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        3820,
        480
      ],
      "id": "6f9452f8-14e2-41d3-8159-55b00b6b1765",
      "name": "OpenRouter Chat Model4",
      "credentials": {
        "openRouterApi": {
          "id": "WrcI4NDeH0Hyl0Z2",
          "name": "OpenRouter DD account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Примерный кусок кода, где мы объединяем тексты и параллельно\n// при помощи регулярного выражения извлекаем 'Company Name'\n\nconst combinedText = (items[0].json.text || '') + ' ' + (items[1].json.text || '');\n\n// Задаём регэксп (пример для \"Company Name: …\"), который ловит всё, что идет\n// после \"Company Name:\" до конца строки или до знака переноса/запятой и т.п.\n// В данном случае используем схему \"Company Name:\" + произвольный текст до конца строки.\nconst companyRegex = /Company\\s+Name:\\s*([^\\r\\n]+)/i;\n\n// Пытаемся найти совпадение\nconst match = combinedText.match(companyRegex);\n\n// Если совпадение найдено, берём группу (подмаску) №1, иначе пустая строка\nconst companyName = match && match[1] ? match[1].trim() : '';\n\nreturn [\n  {\n    json: {\n      // Полный текст, как раньше\n      text: combinedText,\n      // Добавляем отдельную колонку с именем компании\n      companyName: companyName,\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4540,
        380
      ],
      "id": "355c3aad-d86a-41e5-9058-57f4083044a6",
      "name": "Code9"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        4320,
        380
      ],
      "id": "ac759b81-524e-4c8b-bb00-2c0af0eebb50",
      "name": "Merge3"
    },
    {
      "parameters": {
        "operation": "createFromText",
        "content": "={{ $json.text }}",
        "name": "={{ $json.companyName }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "https://drive.google.com/drive/folders/1Ehx183d_STnd3-vi-74T8AwFFXW2lPM8",
          "mode": "url"
        },
        "options": {
          "convertToGoogleDocument": true
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        4780,
        380
      ],
      "id": "1f0b1f28-3bc7-4cb2-8a9e-a9d39030662e",
      "name": "Google Drive1",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "FVL3R6UcDkQOqfdz",
          "name": "n8n Sales Google Drive"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем значение id из первого элемента входящих данных\nconst id = $input.first().json.id;\n\n// Формируем ссылку на Google Документ, подставляя id\nconst googleDocLink = `https://docs.google.com/document/d/${id}`;\n\n// Возвращаем объект с новым полем, содержащим ссылку на документ\nreturn [\n  {\n    json: {\n      id: id,\n      googleDocLink: googleDocLink,\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5040,
        380
      ],
      "id": "9c369126-2892-4093-93f6-8dc5ec2f0d25",
      "name": "Code10"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "get",
        "documentURL": "={{ $json.id }}"
      },
      "name": "Get Google Doc Metadata1",
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 1,
      "position": [
        5340,
        380
      ],
      "id": "fe8337ae-4dde-4af5-8db4-ec83d22a4c3b",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "UGRtdL18RWBWUBkv",
          "name": "Google Docs Sales API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items\nfor (const item of $input.all()) {\n  // Достаём documentId и формируем полную ссылку\n  const docId = item.json.documentId;\n  const googleDocLink = `https://docs.google.com/document/d/${docId}`;\n\n  // Достаём content и ищем в нём Company Name\n  const content = item.json.content || '';\n  // С помощью RegExp ищем строку: \"Company Name: ....\"\n  const companyNameMatch = content.match(/Company Name:\\s*(.*)/i);\n  const companyName = companyNameMatch ? companyNameMatch[1].trim() : 'Not found';\n\n  // Добавляем новые поля к исходным данным\n  item.json.googleDocLink = googleDocLink;\n  item.json.companyName = companyName;\n}\n\nreturn $input.all();\n"
      },
      "name": "Format Final Output1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5620,
        380
      ],
      "id": "93396f44-462f-457d-b1b3-c3f101d9730f"
    },
    {
      "parameters": {
        "functionCode": "/**\n * Функция parseInput принимает входной текст, где каждая строка имеет формат \"Ключ: Значение\".\n * Обрабатываются только строки, ключ которых соответствует одному из заданных полей.\n *\n * Заданные поля (колонки):\n *   Company Website, Contact Person, Speciality, Country-Location,\n *   Target Audience, Company Info, Comment, Manager\n */\nfunction parseInput(input) {\n  const fields = [\n    'Company Website',\n    'Contact Person',\n    'Speciality',\n    'Country-Location',\n    'Target Audience',\n    'Company Info',\n    'Comment',\n    'Manager'\n  ];\n  \n  // Инициализируем объект, где каждому полю соответствует пустая строка по умолчанию.\n  let result = {};\n  fields.forEach(field => {\n    result[field] = '';\n  });\n  \n  // Регулярное выражение для поиска строк вида \"Ключ: Значение\"\n  const regex = /^([^:]+):\\s*(.*)$/gm;\n  let match;\n  while ((match = regex.exec(input)) !== null) {\n    const key = match[1].trim();\n    const value = match[2].trim();\n    \n    // Если ключ входит в список нужных полей, обновляем его значение\n    if (fields.includes(key)) {\n      result[key] = value;\n    }\n  }\n  \n  return result;\n}\n\n// Обработка динамического входного массива, где каждый элемент должен содержать свойство \"text\"\nconst newItems = items.map(item => {\n  // Если в элементе отсутствует свойство \"text\", возвращаем его без изменений\n  if (!item.json.text) return item;\n  \n  const parsedData = parseInput(item.json.text);\n  // Объединяем результат парсинга с остальными колонками исходного объекта.\n  const newJson = { ...item.json, ...parsedData };\n  \n  return { json: newJson };\n});\n\n// Возвращаем данные в формате, ожидаемом n8n: массив объектов с полем json\nreturn newItems;\n"
      },
      "name": "Follow Up. Extract Calendar Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2320,
        360
      ],
      "id": "6e0c4a1c-166f-4fc9-a434-2c8fb79baf70"
    },
    {
      "parameters": {
        "jsCode": "// Loop through all input items and return only the modified summaries\nlet updatedItems = $input.all().map(item => {\n    // Get the summary and apply regex to modify it\n    let updatedSummary = item.json.summary.replace(/ - second call$/i, '');\n    updatedSummary = \"We are going to have one more call with \" + updatedSummary;\n\n    // Return only the modified summary for each item\n    return {\n        summary: updatedSummary\n    };\n});\n\n// Return the updated array of items with only the summary\nreturn updatedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2320,
        880
      ],
      "id": "0e5b32d3-dab4-499d-a42d-736d5ea563cf",
      "name": "Second Call"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Функция parseInput принимает входной текст, где каждая строка имеет формат \"Ключ: Значение\".\n * Обрабатываются только строки, ключ которых соответствует одному из заданных полей.\n *\n * Заданные поля (колонки):\n *   Company Website, Contact Person, Speciality, Country-Location,\n *   Target Audience, Company Info, Comment, Manager\n */\nfunction parseInput(input) {\n  const fields = [\n    'Contact Person',\n    'Manager'\n  ];\n  \n  // Инициализируем объект, где каждому полю соответствует пустая строка по умолчанию.\n  let result = {};\n  fields.forEach(field => {\n    result[field] = '';\n  });\n  \n  // Регулярное выражение для поиска строк вида \"Ключ: Значение\"\n  const regex = /^([^:]+):\\s*(.*)$/gm;\n  let match;\n  while ((match = regex.exec(input)) !== null) {\n    const key = match[1].trim();\n    const value = match[2].trim();\n    \n    // Если ключ входит в список нужных полей, обновляем его значение\n    if (fields.includes(key)) {\n      result[key] = value;\n    }\n  }\n  \n  return result;\n}\n\n// Обработка динамического входного массива, где каждый элемент должен содержать свойство \"text\"\nconst newItems = items.map(item => {\n  // Если в элементе отсутствует свойство \"text\", возвращаем его без изменений\n  if (!item.json.text) return item;\n  \n  const parsedData = parseInput(item.json.text);\n  // Объединяем результат парсинга с остальными колонками исходного объекта.\n  const newJson = { ...item.json, ...parsedData };\n  \n  return { json: newJson };\n});\n\n// Возвращаем данные в формате, ожидаемом n8n: массив объектов с полем json\nreturn newItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2320,
        660
      ],
      "id": "70047bb1-3d7c-4680-97cf-b8aebfd5da82",
      "name": "Interview"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q",
          "mode": "list",
          "cachedResultName": "Processed Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Date": "={{ $json.start.dateTime }}",
            "Company name": "={{ $json.summary }}",
            "Message ID": "={{ $json.id }}",
            "Extracted Link": "={{ $json.googleDocUrl }}",
            "Only link": "={{ $json.documentId }}",
            "Calendar description": "={{ $json.description }}",
            "Manager": "={{ $json.Manager }}",
            "Company Info": "={{ $json['Company Info'] }}",
            "Contact person": "={{ $json['Contact Person'] }}",
            "Company website": "={{ $json['Company Website'] }}"
          },
          "matchingColumns": [
            "Date"
          ],
          "schema": [
            {
              "id": "Message ID",
              "displayName": "Message ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Extracted Link",
              "displayName": "Extracted Link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Only link",
              "displayName": "Only link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Extracred Text",
              "displayName": "Extracred Text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Company name",
              "displayName": "Company name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Calendar description",
              "displayName": "Calendar description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Company website",
              "displayName": "Company website",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Contact person",
              "displayName": "Contact person",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Speciality",
              "displayName": "Speciality",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Country-Location",
              "displayName": "Country-Location",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Target Audience",
              "displayName": "Target Audience",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Company Info",
              "displayName": "Company Info",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Comment",
              "displayName": "Comment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Manager",
              "displayName": "Manager",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        2560,
        660
      ],
      "id": "6a242956-07a2-4548-9e0d-aae9ef4ba0c1",
      "name": "Interview Sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JWf1dYTj83NVJtf5",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "documentURL": "={{ $json[\"Only link\"] }}"
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        2880,
        660
      ],
      "id": "1e68ea83-c042-4843-a5d0-1c5d10f225fd",
      "name": "Interview Doc",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "UGRtdL18RWBWUBkv",
          "name": "Google Docs Sales API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем все входящие элементы\nconst items = $input.all();\n\n// Создаем копию массива и разворачиваем его\nconst reversedItems = items.slice().reverse();\n\n// Возвращаем перевернутый массив\nreturn reversedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3180,
        660
      ],
      "id": "2c9dc703-5076-42ea-836b-c175f7bb7981",
      "name": "Interview reverse code"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q",
          "mode": "list",
          "cachedResultName": "Processed Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Only link": "={{ $json.documentId }}",
            "Extracred Text": "={{ $json.content }}"
          },
          "matchingColumns": [
            "Only link"
          ],
          "schema": [
            {
              "id": "Message ID",
              "displayName": "Message ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Extracted Link",
              "displayName": "Extracted Link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Only link",
              "displayName": "Only link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Extracred Text",
              "displayName": "Extracred Text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        3440,
        660
      ],
      "id": "de3b9ef4-fd85-4f91-bddb-04e316326084",
      "name": "Interview Append",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JWf1dYTj83NVJtf5",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "model": "google/gemma-3-4b-it:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        3820,
        780
      ],
      "id": "638ea5b7-848e-4830-bff2-227f975a798d",
      "name": "OpenRouter Chat Model5",
      "credentials": {
        "openRouterApi": {
          "id": "WrcI4NDeH0Hyl0Z2",
          "name": "OpenRouter DD account"
        }
      }
    },
    {
      "parameters": {
        "model": "google/gemma-3-27b-it:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        3340,
        1200
      ],
      "id": "92d70dba-8d4c-49c4-8d69-63dba3e1b392",
      "name": "OpenRouter Chat Model6",
      "credentials": {
        "openRouterApi": {
          "id": "WrcI4NDeH0Hyl0Z2",
          "name": "OpenRouter DD account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * Функция parseInput принимает входной текст, где каждая строка имеет формат \"Ключ: Значение\".\n * Обрабатываются только строки, ключ которых соответствует одному из заданных полей.\n *\n * Заданные поля (колонки):\n *   Company Website, Contact Person, Speciality, Country-Location,\n *   Target Audience, Company Info, Comment, Manager\n */\nfunction parseInput(input) {\n  const fields = [\n    'Contact Person',\n    'Manager'\n  ];\n  \n  // Инициализируем объект, где каждому полю соответствует пустая строка по умолчанию.\n  let result = {};\n  fields.forEach(field => {\n    result[field] = '';\n  });\n  \n  // Регулярное выражение для поиска строк вида \"Ключ: Значение\"\n  const regex = /^([^:]+):\\s*(.*)$/gm;\n  let match;\n  while ((match = regex.exec(input)) !== null) {\n    const key = match[1].trim();\n    const value = match[2].trim();\n    \n    // Если ключ входит в список нужных полей, обновляем его значение\n    if (fields.includes(key)) {\n      result[key] = value;\n    }\n  }\n  \n  return result;\n}\n\n// Обработка динамического входного массива, где каждый элемент должен содержать свойство \"text\"\nconst newItems = items.map(item => {\n  // Если в элементе отсутствует свойство \"text\", возвращаем его без изменений\n  if (!item.json.text) return item;\n  \n  const parsedData = parseInput(item.json.text);\n  // Объединяем результат парсинга с остальными колонками исходного объекта.\n  const newJson = { ...item.json, ...parsedData };\n  \n  return { json: newJson };\n});\n\n// Возвращаем данные в формате, ожидаемом n8n: массив объектов с полем json\nreturn newItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2320,
        1080
      ],
      "id": "28d16efa-cc33-41f9-ad66-4ac1f400afa7",
      "name": "Intro call"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q",
          "mode": "list",
          "cachedResultName": "Processed Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Date": "={{ $json.start.dateTime }}",
            "Company name": "={{ $json.summary }}",
            "Message ID": "={{ $json.id }}",
            "Extracted Link": "={{ $json.googleDocUrl }}",
            "Only link": "={{ $json.documentId }}",
            "Calendar description": "={{ $json.description }}",
            "Manager": "={{ $json.Manager }}",
            "Company Info": "={{ $json['Company Info'] }}",
            "Contact person": "={{ $json['Contact Person'] }}",
            "Company website": "={{ $json['Company Website'] }}"
          },
          "matchingColumns": [
            "Date"
          ],
          "schema": [
            {
              "id": "Message ID",
              "displayName": "Message ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Extracted Link",
              "displayName": "Extracted Link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Only link",
              "displayName": "Only link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Extracred Text",
              "displayName": "Extracred Text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Company name",
              "displayName": "Company name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Calendar description",
              "displayName": "Calendar description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Company website",
              "displayName": "Company website",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Contact person",
              "displayName": "Contact person",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Speciality",
              "displayName": "Speciality",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Country-Location",
              "displayName": "Country-Location",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Target Audience",
              "displayName": "Target Audience",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Company Info",
              "displayName": "Company Info",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Comment",
              "displayName": "Comment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Manager",
              "displayName": "Manager",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        2560,
        1080
      ],
      "id": "94054d9e-674a-4803-ae73-58db5c1d2a90",
      "name": "Intro call Sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JWf1dYTj83NVJtf5",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "documentURL": "={{ $json[\"Only link\"] }}"
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        2760,
        1000
      ],
      "id": "d139a1ce-31ab-4ca3-8939-bc668190bdb4",
      "name": "Intro call Doc",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "UGRtdL18RWBWUBkv",
          "name": "Google Docs Sales API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем все входящие элементы\nconst items = $input.all();\n\n// Создаем копию массива и разворачиваем его\nconst reversedItems = items.slice().reverse();\n\n// Возвращаем перевернутый массив\nreturn reversedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3180,
        1080
      ],
      "id": "1c14eda6-d2a3-49cb-b633-a48706b93140",
      "name": "Intro call reverse code"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q",
          "mode": "list",
          "cachedResultName": "Processed Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit#gid=0"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Company name",
              "lookupValue": "={{ $('Follow Up Sheet').item.json[\"Company name\"] }}"
            },
            {
              "lookupColumn": "Message ID",
              "lookupValue": "={{ $('Follow Up Sheet').item.json[\"Message ID\"] }}"
            },
            {
              "lookupColumn": "Date",
              "lookupValue": "={{ $('Follow Up Sheet').item.json.Date }}"
            },
            {
              "lookupColumn": "Only link",
              "lookupValue": "={{ $('Follow Up Sheet').item.json[\"Only link\"] }}"
            },
            {
              "lookupColumn": "Extracted Link",
              "lookupValue": "={{ $('Follow Up Sheet').item.json[\"Extracted Link\"] }}"
            },
            {
              "lookupColumn": "Calendar description",
              "lookupValue": "={{ $('Follow Up Sheet').item.json[\"Calendar description\"] }}"
            },
            {
              "lookupColumn": "Company website",
              "lookupValue": "={{ $('Follow Up Sheet').item.json['Company website'] }}"
            },
            {
              "lookupColumn": "Contact person",
              "lookupValue": "={{ $('Follow Up Sheet').item.json['Contact person'] }}"
            },
            {
              "lookupColumn": "Speciality",
              "lookupValue": "={{ $('Follow Up Sheet').item.json.Speciality }}"
            },
            {
              "lookupColumn": "Country-Location",
              "lookupValue": "={{ $('Follow Up Sheet').item.json['Country-Location'] }}"
            },
            {
              "lookupColumn": "Target Audience",
              "lookupValue": "={{ $('Follow Up Sheet').item.json['Target Audience'] }}"
            },
            {
              "lookupColumn": "Company Info",
              "lookupValue": "={{ $('Follow Up Sheet').item.json['Company Info'] }}"
            },
            {
              "lookupColumn": "Comment",
              "lookupValue": "={{ $('Follow Up Sheet').item.json.Comment }}"
            },
            {
              "lookupColumn": "Manager",
              "lookupValue": "={{ $('Follow Up Sheet').item.json.Manager }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        3660,
        660
      ],
      "id": "4b18f9d1-190c-4d6e-890f-ff4c2b8a4066",
      "name": "Interview Read",
      "alwaysOutputData": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JWf1dYTj83NVJtf5",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Familiarize yourself with the list of employees and their roles who may be mentioned from our side in the transcription (they may not be):\n    * Sales Manager: Sona G, Niko K, Sabina H, Anastasia K\n    * Lead generator: Anna Bu, Anahit O, Evgeniya N, Firuza D, Irina Kl, Karina N, Liliia N, Mykhailo Ne, Olena A, Sofiya L, Yelyzaveta P\n    * Financial manager: Daria Y\n    * Front End Developer: Artem S, Maxim S\n    * Graphic Designer: Anastasiya P, Natalia L\n    * Illustrator: Vilhelm S\n    * PPC Specialist: Ekaterina E\n    * prompt engineer: Danylo I, Mykola S\n    * Recruiter: Anastasiya F, Ganna A, Sabina H\n    * UI UX designer: Kristina Y\n    * Video Editor: Dariya A, Svyatoslav Pod\n\nFind mentions of employee names from the list above in the transcription. Important: search specifically for full names or last names as listed and insert them into the appropriate fields.\nIn the Contact Person field, put the name from the call that is not found in the employee list I provided. If there is no information for any field, leave an empty line after \"example: \".\n\nExtract information from the following call transcription and fill in the report template below.\n\nWhat you need to add to the \"Candidates: \" - ours employees from list in the start of prompt\n\nafter \"During the introductory call, {{ $json['Contact person'] }}(or you can find name in transcribation ({{ $json['Calendar description'] }} but remember list of our employees)) \" you need to add correct information from Call Transcription ( {{ $json.content }} )\n\nafter \"The Sales team \" (it meands ours sales team) you need to add correct information from Call Transcription ( {{ $json.content }} )\n\nSome remarks to guide you:\n* \"Responsibilities: \" -  If responsibilities are mentioned, write them as bullet points using the exact wording from the transcription. If **no responsibilities are mentioned**, leave this field \n\nCall Transcription:\n{{ $json.content }}\n\nReport Template:\nWe had an intro call with {{ $json['Company name'] }}\n\nDuring the introductory call, {{ $json['Contact person'] }} ...\n\nThe sales team ...\n\nResponsibilities:\n\nFormat the answer exactly according to the template, leaving an **empty** line between the field and the value."
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        3480,
        980
      ],
      "id": "1d6bfaa6-0516-40e3-9d53-464cd9464fce",
      "name": "Intro Call Report"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Familiarize yourself with the list of employees and their roles who may be mentioned from our side in the transcription (they may not be):\n    * Sales Manager: Sona G, Niko K, Sabina H, Anastasia K\n    * Lead generator: Anna Bu, Anahit O, Evgeniya N, Firuza D, Irina Kl, Karina N, Liliia N, Mykhailo Ne, Olena A, Sofiya L, Yelyzaveta P\n    * Financial manager: Daria Y\n    * Front End Developer: Artem S, Maxim S\n    * Graphic Designer: Anastasiya P, Natalia L\n    * Illustrator: Vilhelm S\n    * PPC Specialist: Ekaterina E\n    * prompt engineer: Danylo I, Mykola S\n    * Recruiter: Anastasiya F, Ganna A, Sabina H\n    * UI UX designer: Kristina Y\n    * Video Editor: Dariya A, Svyatoslav Pod\n\nFind mentions of employee names from the list above in the transcription. Important: search specifically for full names or last names as listed and insert them into the appropriate fields.\nIn the Contact Person field, put the name from the call that is not found in the employee list I provided. If there is no information for any field, leave an empty line after \"example: \".\n\nExtract information from the following call transcription and fill in the report template below.\n\nWhat you need to add to the \"Candidates: \" - ours employees from list in the start of prompt\n\nafter \"During the interview call, {{ $json['Contact person'] }} from {{ $json['Company name'] }} \" you need to add correct information from Call Transcription ( {{ $json['Extracred Text'] }} )  \n\nCall Transcription:\n{{ $json['Extracred Text'] }}\n\nReport Template:\nWe had an interview call with {{ $json['Company name'] }}\n\nCandidates: \n\nDuring the interview call, {{ $json['Contact person'] }} from {{ $json['Company name'] }} ...\n\nThe client was engaged by the LG manager {{ $json['Manager'] }}\n\nFormat the answer exactly according to the template, leaving an **empty** line between the field and the value."
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        3960,
        660
      ],
      "id": "1ae01345-93bc-4e6a-8f44-de88c4b66789",
      "name": "Interview Report"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q",
          "mode": "list",
          "cachedResultName": "Processed Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Date": "={{ $json.start.dateTime }}",
            "Company name": "={{ $json.summary }}",
            "Message ID": "={{ $json.id }}",
            "Extracted Link": "={{ $json.googleDocUrl }}",
            "Only link": "={{ $json.documentId }}",
            "Calendar description": "={{ $json.description }}",
            "Manager": "={{ $json.Manager }}",
            "Comment": "={{ $json.Comment }}",
            "Company Info": "={{ $json['Company Info'] }}",
            "Target Audience": "={{ $json['Target Audience'] }}",
            "Country-Location": "={{ $json['Country-Location'] }}",
            "Speciality": "={{ $json.Speciality }}",
            "Contact person": "={{ $json['Contact Person'] }}",
            "Company website": "={{ $json['Company Website'] }}"
          },
          "matchingColumns": [
            "Date"
          ],
          "schema": [
            {
              "id": "Message ID",
              "displayName": "Message ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Extracted Link",
              "displayName": "Extracted Link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Only link",
              "displayName": "Only link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Extracred Text",
              "displayName": "Extracred Text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Company name",
              "displayName": "Company name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Calendar description",
              "displayName": "Calendar description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Company website",
              "displayName": "Company website",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Contact person",
              "displayName": "Contact person",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Speciality",
              "displayName": "Speciality",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Country-Location",
              "displayName": "Country-Location",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Target Audience",
              "displayName": "Target Audience",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Company Info",
              "displayName": "Company Info",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Comment",
              "displayName": "Comment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Manager",
              "displayName": "Manager",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        2560,
        360
      ],
      "id": "3c5cf182-2a99-49f3-ada4-e58661fb1eed",
      "name": "Follow Up Sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JWf1dYTj83NVJtf5",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "documentURL": "={{ $json[\"Only link\"] }}"
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        2880,
        360
      ],
      "id": "eafe4392-cd40-4318-954b-7895353ce9ef",
      "name": "Follow Up Doc",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "UGRtdL18RWBWUBkv",
          "name": "Google Docs Sales API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем все входящие элементы\nconst items = $input.all();\n\n// Создаем копию массива и разворачиваем его\nconst reversedItems = items.slice().reverse();\n\n// Возвращаем перевернутый массив\nreturn reversedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3180,
        360
      ],
      "id": "94687e63-1bae-4dec-8e80-d1ba037b1b94",
      "name": "Follow Up reverse Code"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q",
          "mode": "list",
          "cachedResultName": "Processed Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Only link": "={{ $json.documentId }}",
            "Extracred Text": "={{ $json.content }}"
          },
          "matchingColumns": [
            "Only link"
          ],
          "schema": [
            {
              "id": "Message ID",
              "displayName": "Message ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Extracted Link",
              "displayName": "Extracted Link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Only link",
              "displayName": "Only link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Extracred Text",
              "displayName": "Extracred Text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        3440,
        360
      ],
      "id": "61106e28-f29d-4222-ac82-b0eaf39d4963",
      "name": "Follow Up Append",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JWf1dYTj83NVJtf5",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q",
          "mode": "list",
          "cachedResultName": "Processed Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit#gid=0"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Company name",
              "lookupValue": "={{ $('Follow Up Sheet').item.json[\"Company name\"] }}"
            },
            {
              "lookupColumn": "Message ID",
              "lookupValue": "={{ $('Follow Up Sheet').item.json[\"Message ID\"] }}"
            },
            {
              "lookupColumn": "Date",
              "lookupValue": "={{ $('Follow Up Sheet').item.json.Date }}"
            },
            {
              "lookupColumn": "Only link",
              "lookupValue": "={{ $('Follow Up Sheet').item.json[\"Only link\"] }}"
            },
            {
              "lookupColumn": "Extracted Link",
              "lookupValue": "={{ $('Follow Up Sheet').item.json[\"Extracted Link\"] }}"
            },
            {
              "lookupColumn": "Calendar description",
              "lookupValue": "={{ $('Follow Up Sheet').item.json[\"Calendar description\"] }}"
            },
            {
              "lookupColumn": "Company website",
              "lookupValue": "={{ $('Follow Up Sheet').item.json['Company website'] }}"
            },
            {
              "lookupColumn": "Contact person",
              "lookupValue": "={{ $('Follow Up Sheet').item.json['Contact person'] }}"
            },
            {
              "lookupColumn": "Speciality",
              "lookupValue": "={{ $('Follow Up Sheet').item.json.Speciality }}"
            },
            {
              "lookupColumn": "Country-Location",
              "lookupValue": "={{ $('Follow Up Sheet').item.json['Country-Location'] }}"
            },
            {
              "lookupColumn": "Target Audience",
              "lookupValue": "={{ $('Follow Up Sheet').item.json['Target Audience'] }}"
            },
            {
              "lookupColumn": "Company Info",
              "lookupValue": "={{ $('Follow Up Sheet').item.json['Company Info'] }}"
            },
            {
              "lookupColumn": "Comment",
              "lookupValue": "={{ $('Follow Up Sheet').item.json.Comment }}"
            },
            {
              "lookupColumn": "Manager",
              "lookupValue": "={{ $('Follow Up Sheet').item.json.Manager }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        3660,
        360
      ],
      "id": "85ef9679-806f-491d-b2a4-5b939f37a5b9",
      "name": "Follow Up Read",
      "alwaysOutputData": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JWf1dYTj83NVJtf5",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Familiarize yourself with the list of employees and their roles who may be mentioned from our side in the transcription (they may not be):\n    * Sales Manager: Sona G, Niko K, Sabina H, Anastasia K\n    * Lead generator: Anna Bu, Anahit O, Evgeniya N, Firuza D, Irina Kl, Karina N, Liliia N, Mykhailo Ne, Olena A, Sofiya L, Yelyzaveta P\n    * Financial manager: Daria Y\n    * Front End Developer: Artem S, Maxim S\n    * Graphic Designer: Anastasiya P, Natalia L\n    * Illustrator: Vilhelm S\n    * PPC Specialist: Ekaterina E\n    * prompt engineer: Danylo I, Mykola S\n    * Recruiter: Anastasiya F, Ganna A, Sabina H\n    * UI UX designer: Kristina Y\n    * Video Editor: Dariya A, Svyatoslav Pod\n\nFind mentions of employee names from the list above in the transcription. Important: search specifically for full names or last names as listed and insert them into the appropriate fields.\nIn the Contact Person field, put the name from the call that is not found in the employee list I provided. If there is no information for any field, leave an empty line after \"example: \".\n\nExtract information from the following call transcription and fill in the report template below.\n\nWhat you need to add to the \"Comment: \" - Summarize the call that took place with a client using this call script. Write a paragraph emphasizing client's hiring needs - the position that he wants to fill. End the paragraph with the agreed future steps. Also, write separately the responsibilities and skills required for the position that the client wants to fill.\n\nCall Transcription:\n{{ $json['Extracred Text'] }}\n\nReport Template:\nCompany Name: {{ $json['Company name'] }}\n\nCompany Website: {{ $json['Company website'] }}\n\nContact Person: {{ $json['Contact person'] }}\n\nSpeciality: {{ $json.Speciality }}\n\nCountry-Location: {{ $json['Country-Location'] }}\n\nTarget Audience: {{ $json['Target Audience'] }}\n\nCompany Info: {{ $json['Company Info'] }}\n\nComment: \n\nFormat the answer exactly according to the template, leaving an **empty** line between the field and the value."
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        3960,
        240
      ],
      "id": "397357b5-dbec-42f9-84c5-3c9b7419d3d7",
      "name": "Follow Up Report"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=find in the Call Transcription information, about Immediate Requirement, Professional Skills, Software, Responsibilities, Future Needs, Status by the position(s) (possible/impossible), Next Step, Next Contact Day and Planned Start Date.\n\n**If, and ONLY if, a specific piece of information for a field is DIRECTLY MENTIONED in the Call Transcription, then extract it and write it under the corresponding field in the template.**\n\n**If a field's information is NOT mentioned at all in the Call Transcription, then leave that entire field in the template COMPLETELY EMPTY.** This means you should write the field name followed by a colon, and then **immediately insert two newline characters (effectively leaving a blank line after the field name).  Do NOT write anything else like \"(None mentioned)\", \"(Not specified)\", or any explanatory text.  Just leave it blank.**\n\nExtract information **EXACTLY as it appears** in the following call transcription and fill in the report template below.  **Do not infer, assume, or add any information that is not explicitly present in the transcription.**\n\nSome remarks to guide you:\n* \"Software: \" - If there is **no mention** of any software in the transcription, leave this field **completely empty**.\n* \"Responsibilities: \" -  If responsibilities are mentioned, write them as bullet points using the exact wording from the transcription. If **no responsibilities are mentioned**, leave this field **completely empty**.\n* \"Future Needs: \" - If future needs are explicitly mentioned, extract them. If **no future needs are mentioned**, leave this field **completely empty**.\n* \"Status by the position(s) (possible/impossible): \" - If the status of the position is mentioned, extract it. If **no status is mentioned**, leave this field **completely empty**.\n* \"Next Contact Day: \" - If a next contact day is mentioned, extract it. If **no next contact day is mentioned**, leave this field **completely empty**.\n* \"Planned Start Date: \" - If a planned start date is mentioned, extract it. If **no planned start date is mentioned**, leave this field **completely empty**.\n\n\nCall Transcription:\n{{ $json['Extracred Text'] }}\n\nfill information here\n\nImmediate Requirement:\n\nProfessional Skills:\n\nSoftware:\n\nResponsibilities:\n\nFuture Needs:\n\nStatus by the position(s) (possible/impossible): \n\nNext Step:\n\nNext Contact Day:\n\nPlanned Start Date:\n\nFormat the answer exactly according to the template.  For fields with information, leave an empty line between the field name and the value (or the first bullet point for Responsibilities). For fields with NO information from the transcription, leave a **completely empty line** after the field name and colon."
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        3960,
        360
      ],
      "id": "60c53b86-0df8-4fb4-bfd6-9b41cbd09e23",
      "name": "Usefull information about Follow Up"
    },
    {
      "parameters": {
        "model": "google/gemma-3-4b-it:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        3820,
        1420
      ],
      "id": "718157ee-a1e1-40ee-86bd-3bc55f758bd0",
      "name": "OpenRouter Chat Model7",
      "credentials": {
        "openRouterApi": {
          "id": "WrcI4NDeH0Hyl0Z2",
          "name": "OpenRouter DD account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * Функция parseInput принимает входной текст, где каждая строка имеет формат \"Ключ: Значение\".\n * Обрабатываются только строки, ключ которых соответствует одному из заданных полей.\n *\n * Заданные поля (колонки):\n *   Company Website, Contact Person, Speciality, Country-Location,\n *   Target Audience, Company Info, Comment, Manager\n */\nfunction parseInput(input) {\n  const fields = [\n    'Contact Person',\n    'Manager'\n  ];\n  \n  // Инициализируем объект, где каждому полю соответствует пустая строка по умолчанию.\n  let result = {};\n  fields.forEach(field => {\n    result[field] = '';\n  });\n  \n  // Регулярное выражение для поиска строк вида \"Ключ: Значение\"\n  const regex = /^([^:]+):\\s*(.*)$/gm;\n  let match;\n  while ((match = regex.exec(input)) !== null) {\n    const key = match[1].trim();\n    const value = match[2].trim();\n    \n    // Если ключ входит в список нужных полей, обновляем его значение\n    if (fields.includes(key)) {\n      result[key] = value;\n    }\n  }\n  \n  return result;\n}\n\n// Обработка динамического входного массива, где каждый элемент должен содержать свойство \"text\"\nconst newItems = items.map(item => {\n  // Если в элементе отсутствует свойство \"text\", возвращаем его без изменений\n  if (!item.json.text) return item;\n  \n  const parsedData = parseInput(item.json.text);\n  // Объединяем результат парсинга с остальными колонками исходного объекта.\n  const newJson = { ...item.json, ...parsedData };\n  \n  return { json: newJson };\n});\n\n// Возвращаем данные в формате, ожидаемом n8n: массив объектов с полем json\nreturn newItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2320,
        1300
      ],
      "id": "ed0c6528-b927-4d15-8014-2abc26775401",
      "name": "Intorductory call"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q",
          "mode": "list",
          "cachedResultName": "Processed Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Date": "={{ $json.start.dateTime }}",
            "Company name": "={{ $json.summary }}",
            "Message ID": "={{ $json.id }}",
            "Extracted Link": "={{ $json.googleDocUrl }}",
            "Only link": "={{ $json.documentId }}",
            "Calendar description": "={{ $json.description }}",
            "Manager": "={{ $json.Manager }}",
            "Comment": "={{ $json.Comment }}",
            "Company Info": "={{ $json['Company Info'] }}",
            "Target Audience": "={{ $json['Target Audience'] }}",
            "Country-Location": "={{ $json['Country-Location'] }}",
            "Speciality": "={{ $json.Speciality }}",
            "Contact person": "={{ $json['Contact Person'] }}",
            "Company website": "={{ $json['Company Website'] }}"
          },
          "matchingColumns": [
            "Date"
          ],
          "schema": [
            {
              "id": "Message ID",
              "displayName": "Message ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Extracted Link",
              "displayName": "Extracted Link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Only link",
              "displayName": "Only link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Extracred Text",
              "displayName": "Extracred Text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Company name",
              "displayName": "Company name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Calendar description",
              "displayName": "Calendar description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Company website",
              "displayName": "Company website",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Contact person",
              "displayName": "Contact person",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Speciality",
              "displayName": "Speciality",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Country-Location",
              "displayName": "Country-Location",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Target Audience",
              "displayName": "Target Audience",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Company Info",
              "displayName": "Company Info",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Comment",
              "displayName": "Comment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Manager",
              "displayName": "Manager",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        2560,
        1300
      ],
      "id": "2cce190d-382f-4bde-80ed-417758e82479",
      "name": "Intorductory Sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JWf1dYTj83NVJtf5",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "documentURL": "={{ $json[\"Only link\"] }}"
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        2880,
        1300
      ],
      "id": "4b9fb05b-26c9-4e17-aa0d-36fa90656341",
      "name": "Intorductory Doc",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "UGRtdL18RWBWUBkv",
          "name": "Google Docs Sales API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем все входящие элементы\nconst items = $input.all();\n\n// Создаем копию массива и разворачиваем его\nconst reversedItems = items.slice().reverse();\n\n// Возвращаем перевернутый массив\nreturn reversedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3180,
        1300
      ],
      "id": "ef10f114-3501-4535-99a8-7e9ce758390f",
      "name": "Intorductory reverse Code"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q",
          "mode": "list",
          "cachedResultName": "Processed Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Only link": "={{ $json.documentId }}",
            "Extracred Text": "={{ $json.content }}"
          },
          "matchingColumns": [
            "Only link"
          ],
          "schema": [
            {
              "id": "Message ID",
              "displayName": "Message ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Extracted Link",
              "displayName": "Extracted Link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Only link",
              "displayName": "Only link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Extracred Text",
              "displayName": "Extracred Text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        3440,
        1300
      ],
      "id": "1acc6b33-6bae-4fef-87d9-d07b7df5563d",
      "name": "Intorductory Append",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JWf1dYTj83NVJtf5",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q",
          "mode": "list",
          "cachedResultName": "Processed Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit#gid=0"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Company name",
              "lookupValue": "={{ $('Intorductory Sheet').item.json[\"Company name\"] }}"
            },
            {
              "lookupColumn": "Message ID",
              "lookupValue": "={{ $('Intorductory Sheet').item.json[\"Message ID\"] }}"
            },
            {
              "lookupColumn": "Date",
              "lookupValue": "={{ $('Intorductory Sheet').item.json.Date }}"
            },
            {
              "lookupColumn": "Only link",
              "lookupValue": "={{ $('Intorductory Sheet').item.json[\"Only link\"] }}"
            },
            {
              "lookupColumn": "Extracted Link",
              "lookupValue": "={{ $('Intorductory Sheet').item.json[\"Extracted Link\"] }}"
            },
            {
              "lookupColumn": "Calendar description",
              "lookupValue": "={{ $('Intorductory Sheet').item.json[\"Calendar description\"] }}"
            },
            {
              "lookupColumn": "Company website",
              "lookupValue": "={{ $('Intorductory Sheet').item.json['Company website'] }}"
            },
            {
              "lookupColumn": "Contact person",
              "lookupValue": "={{ $('Intorductory Sheet').item.json['Contact person'] }}"
            },
            {
              "lookupColumn": "Speciality",
              "lookupValue": "={{ $('Intorductory Sheet').item.json.Speciality }}"
            },
            {
              "lookupColumn": "Country-Location",
              "lookupValue": "={{ $('Intorductory Sheet').item.json['Country-Location'] }}"
            },
            {
              "lookupColumn": "Target Audience",
              "lookupValue": "={{ $('Intorductory Sheet').item.json['Target Audience'] }}"
            },
            {
              "lookupColumn": "Company Info",
              "lookupValue": "={{ $('Intorductory Sheet').item.json['Company Info'] }}"
            },
            {
              "lookupColumn": "Comment",
              "lookupValue": "={{ $('Intorductory Sheet').item.json.Comment }}"
            },
            {
              "lookupColumn": "Manager",
              "lookupValue": "={{ $('Intorductory Sheet').item.json.Manager }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        3660,
        1300
      ],
      "id": "cc24e3b1-c013-44f0-9a81-2f557fd75bc9",
      "name": "Intorductory Read",
      "alwaysOutputData": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JWf1dYTj83NVJtf5",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Familiarize yourself with the list of employees and their roles who may be mentioned from our side in the transcription (they may not be):\n    * Sales Manager: Sona G, Niko K, Sabina H, Anastasia K\n    * Lead generator: Anna Bu, Anahit O, Evgeniya N, Firuza D, Irina Kl, Karina N, Liliia N, Mykhailo Ne, Olena A, Sofiya L, Yelyzaveta P\n    * Financial manager: Daria Y\n    * Front End Developer: Artem S, Maxim S\n    * Graphic Designer: Anastasiya P, Natalia L\n    * Illustrator: Vilhelm S\n    * PPC Specialist: Ekaterina E\n    * prompt engineer: Danylo I, Mykola S\n    * Recruiter: Anastasiya F, Ganna A, Sabina H\n    * UI UX designer: Kristina Y\n    * Video Editor: Dariya A, Svyatoslav Pod\n\nFind mentions of employee names from the list above in the transcription. Important: search specifically for full names or last names as listed and insert them into the appropriate fields.\nIn the Contact Person field, put the name from the call that is not found in the employee list I provided. If there is no information for any field, leave an empty line after \"example: \".\n\nExtract information from the following call transcription and fill in the report template below.\n\nWhat you need to add to the \"Comment: \" - Summarize the call that took place with a client using this call script. Write a paragraph emphasizing client's hiring needs - the position that he wants to fill. End the paragraph with the agreed future steps. Also, write separately the responsibilities and skills required for the position that the client wants to fill.\n\n\"Main Responsibilities: \" -  If responsibilities are mentioned, write them as bullet points using the exact wording from the transcription. If **no responsibilities are mentioned**, leave this field \n\n\"Candidates: \" - ours employees from list in the start of prompt\n\nCall Transcription:\n{{ $json['Extracred Text'] }}\n\nReport Template:\nWe had a second interview call with {{ $json['Company name'] }}\n\nCandidates: \n\nMain Responsibilities: \n\nComment: \n\nThe client was engaged by the LG manager {{ $json['Manager'] }}\n\nFormat the answer exactly according to the template, leaving an **empty** line between the field and the value."
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        3960,
        1300
      ],
      "id": "ba1987fc-ee56-4980-9685-78242e1e49ad",
      "name": "Intorductory Report"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Функция parseInput принимает входной текст, где каждая строка имеет формат \"Ключ: Значение\".\n * Обрабатываются только строки, ключ которых соответствует одному из заданных полей.\n *\n * Заданные поля (колонки):\n *   Company Website, Contact Person, Speciality, Country-Location,\n *   Target Audience, Company Info, Comment, Manager\n */\nfunction parseInput(input) {\n  const fields = [\n    'Contact Person',\n    'Manager'\n  ];\n  \n  // Инициализируем объект, где каждому полю соответствует пустая строка по умолчанию.\n  let result = {};\n  fields.forEach(field => {\n    result[field] = '';\n  });\n  \n  // Регулярное выражение для поиска строк вида \"Ключ: Значение\"\n  const regex = /^([^:]+):\\s*(.*)$/gm;\n  let match;\n  while ((match = regex.exec(input)) !== null) {\n    const key = match[1].trim();\n    const value = match[2].trim();\n    \n    // Если ключ входит в список нужных полей, обновляем его значение\n    if (fields.includes(key)) {\n      result[key] = value;\n    }\n  }\n  \n  return result;\n}\n\n// Обработка динамического входного массива, где каждый элемент должен содержать свойство \"text\"\nconst newItems = items.map(item => {\n  // Если в элементе отсутствует свойство \"text\", возвращаем его без изменений\n  if (!item.json.text) return item;\n  \n  const parsedData = parseInput(item.json.text);\n  // Объединяем результат парсинга с остальными колонками исходного объекта.\n  const newJson = { ...item.json, ...parsedData };\n  \n  return { json: newJson };\n});\n\n// Возвращаем данные в формате, ожидаемом n8n: массив объектов с полем json\nreturn newItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2320,
        1520
      ],
      "id": "5fef00d4-ffd8-4d58-809e-6df6941e04a5",
      "name": "Kick off call"
    },
    {
      "parameters": {
        "model": "google/gemma-3-4b-it:free",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        3820,
        1640
      ],
      "id": "da964023-aab7-4eb0-bcb5-36dd2d5c18fa",
      "name": "OpenRouter Chat Model8",
      "credentials": {
        "openRouterApi": {
          "id": "WrcI4NDeH0Hyl0Z2",
          "name": "OpenRouter DD account"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q",
          "mode": "list",
          "cachedResultName": "Processed Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Date": "={{ $json.start.dateTime }}",
            "Company name": "={{ $json.summary }}",
            "Message ID": "={{ $json.id }}",
            "Extracted Link": "={{ $json.googleDocUrl }}",
            "Only link": "={{ $json.documentId }}",
            "Calendar description": "={{ $json.description }}",
            "Manager": "={{ $json.Manager }}",
            "Comment": "={{ $json.Comment }}",
            "Company Info": "={{ $json['Company Info'] }}",
            "Target Audience": "={{ $json['Target Audience'] }}",
            "Country-Location": "={{ $json['Country-Location'] }}",
            "Speciality": "={{ $json.Speciality }}",
            "Contact person": "={{ $json['Contact Person'] }}",
            "Company website": "={{ $json['Company Website'] }}"
          },
          "matchingColumns": [
            "Date"
          ],
          "schema": [
            {
              "id": "Message ID",
              "displayName": "Message ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Extracted Link",
              "displayName": "Extracted Link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Only link",
              "displayName": "Only link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Extracred Text",
              "displayName": "Extracred Text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Company name",
              "displayName": "Company name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Calendar description",
              "displayName": "Calendar description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Company website",
              "displayName": "Company website",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Contact person",
              "displayName": "Contact person",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Speciality",
              "displayName": "Speciality",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Country-Location",
              "displayName": "Country-Location",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Target Audience",
              "displayName": "Target Audience",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Company Info",
              "displayName": "Company Info",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Comment",
              "displayName": "Comment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Manager",
              "displayName": "Manager",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        2560,
        1520
      ],
      "id": "04f08b2d-ec31-46d9-9f6d-5c4cd9fde450",
      "name": "Kick off Sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JWf1dYTj83NVJtf5",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "documentURL": "={{ $json[\"Only link\"] }}"
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        2880,
        1520
      ],
      "id": "eef4c63c-eb4e-44a7-9aeb-435822306968",
      "name": "Kick off Doc",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "UGRtdL18RWBWUBkv",
          "name": "Google Docs Sales API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем все входящие элементы\nconst items = $input.all();\n\n// Создаем копию массива и разворачиваем его\nconst reversedItems = items.slice().reverse();\n\n// Возвращаем перевернутый массив\nreturn reversedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3180,
        1520
      ],
      "id": "96c81da9-cb1f-4a72-9615-d0403205611d",
      "name": "Kick off reverse Code"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q",
          "mode": "list",
          "cachedResultName": "Processed Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Only link": "={{ $json.documentId }}",
            "Extracred Text": "={{ $json.content }}"
          },
          "matchingColumns": [
            "Only link"
          ],
          "schema": [
            {
              "id": "Message ID",
              "displayName": "Message ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Extracted Link",
              "displayName": "Extracted Link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Only link",
              "displayName": "Only link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Extracred Text",
              "displayName": "Extracred Text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        3440,
        1520
      ],
      "id": "0b51644f-f1ad-4f4d-866f-3fd06785ac83",
      "name": "Kick off Append",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JWf1dYTj83NVJtf5",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q",
          "mode": "list",
          "cachedResultName": "Processed Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit#gid=0"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Company name",
              "lookupValue": "={{ $('Intorductory Sheet').item.json[\"Company name\"] }}"
            },
            {
              "lookupColumn": "Message ID",
              "lookupValue": "={{ $('Intorductory Sheet').item.json[\"Message ID\"] }}"
            },
            {
              "lookupColumn": "Date",
              "lookupValue": "={{ $('Intorductory Sheet').item.json.Date }}"
            },
            {
              "lookupColumn": "Only link",
              "lookupValue": "={{ $('Intorductory Sheet').item.json[\"Only link\"] }}"
            },
            {
              "lookupColumn": "Extracted Link",
              "lookupValue": "={{ $('Intorductory Sheet').item.json[\"Extracted Link\"] }}"
            },
            {
              "lookupColumn": "Calendar description",
              "lookupValue": "={{ $('Intorductory Sheet').item.json[\"Calendar description\"] }}"
            },
            {
              "lookupColumn": "Company website",
              "lookupValue": "={{ $('Intorductory Sheet').item.json['Company website'] }}"
            },
            {
              "lookupColumn": "Contact person",
              "lookupValue": "={{ $('Intorductory Sheet').item.json['Contact person'] }}"
            },
            {
              "lookupColumn": "Speciality",
              "lookupValue": "={{ $('Intorductory Sheet').item.json.Speciality }}"
            },
            {
              "lookupColumn": "Country-Location",
              "lookupValue": "={{ $('Intorductory Sheet').item.json['Country-Location'] }}"
            },
            {
              "lookupColumn": "Target Audience",
              "lookupValue": "={{ $('Intorductory Sheet').item.json['Target Audience'] }}"
            },
            {
              "lookupColumn": "Company Info",
              "lookupValue": "={{ $('Intorductory Sheet').item.json['Company Info'] }}"
            },
            {
              "lookupColumn": "Comment",
              "lookupValue": "={{ $('Intorductory Sheet').item.json.Comment }}"
            },
            {
              "lookupColumn": "Manager",
              "lookupValue": "={{ $('Intorductory Sheet').item.json.Manager }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        3660,
        1520
      ],
      "id": "e2534687-a89c-473c-ba6e-c19570fb4a5e",
      "name": "Kick off Read",
      "alwaysOutputData": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JWf1dYTj83NVJtf5",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Familiarize yourself with the list of employees and their roles who may be mentioned from our side in the transcription (they may not be):\n    * Sales Manager: Sona G, Niko K, Sabina H, Anastasia K\n    * Lead generator: Anna Bu, Anahit O, Evgeniya N, Firuza D, Irina Kl, Karina N, Liliia N, Mykhailo Ne, Olena A, Sofiya L, Yelyzaveta P\n    * Financial manager: Daria Y\n    * Front End Developer: Artem S, Maxim S\n    * Graphic Designer: Anastasiya P, Natalia L\n    * Illustrator: Vilhelm S\n    * PPC Specialist: Ekaterina E\n    * prompt engineer: Danylo I, Mykola S\n    * Recruiter: Anastasiya F, Ganna A, Sabina H\n    * UI UX designer: Kristina Y\n    * Video Editor: Dariya A, Svyatoslav Pod\n\nFind mentions of employee names from the list above in the transcription. Important: search specifically for full names or last names as listed and insert them into the appropriate fields.\nIn the Contact Person field, put the name from the call that is not found in the employee list I provided. If there is no information for any field, leave an empty line after \"example: \".\n\nExtract information from the following call transcription and fill in the report template below.\n\nWhat you need to add to the \"Comment: \" - Summarize the call that took place with a client using this call script. Write a paragraph emphasizing client's hiring needs - the position that he wants to fill. End the paragraph with the agreed future steps. Also, write separately the responsibilities and skills required for the position that the client wants to fill.\n\n\"The call focused on... \" here you need write what about call was? mention {{ $json['Contact person'] }} and what he requested. Next step\n\n\"Candidates: \" - ours employees from list in the start of prompt\n\nCall Transcription:\n{{ $json['Extracred Text'] }}\n\nReport Template:\nWe had a kick off meeting with {{ $json['Company name'] }}\n\nThe call focused on...\n\n{{ $json['Contact person'] }} also mentioned...\n\nFormat the answer exactly according to the template, leaving an **empty** line between the field and the value."
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        3960,
        1520
      ],
      "id": "20429217-a2a1-4fea-8039-0e811ee59a90",
      "name": "Kick off Report"
    },
    {
      "parameters": {
        "functionCode": "/**\n * Функция parseInput принимает входной текст, где каждая строка имеет формат \"Ключ: Значение\".\n * Обрабатываются только строки, ключ которых соответствует одному из заданных полей.\n *\n * Заданные поля (колонки):\n *   Company Website, Contact Person, Speciality, Country-Location,\n *   Target Audience, Company Info, Comment, Manager\n */\nfunction parseInput(input) {\n  const fields = [\n    'Company Website',\n    'Contact Person',\n    'Speciality',\n    'Country-Location',\n    'Target Audience',\n    'Company Info',\n    'Comment',\n    'Manager'\n  ];\n  \n  // Инициализируем объект, где каждому полю соответствует пустая строка по умолчанию.\n  let result = {};\n  fields.forEach(field => {\n    result[field] = '';\n  });\n  \n  // Регулярное выражение для поиска строк вида \"Ключ: Значение\"\n  const regex = /^([^:]+):\\s*(.*)$/gm;\n  let match;\n  while ((match = regex.exec(input)) !== null) {\n    const key = match[1].trim();\n    const value = match[2].trim();\n    \n    // Если ключ входит в список нужных полей, обновляем его значение\n    if (fields.includes(key)) {\n      result[key] = value;\n    }\n  }\n  \n  return result;\n}\n\n// Обработка динамического входного массива, где каждый элемент должен содержать свойство \"text\"\nconst newItems = items.map(item => {\n  // Если в элементе отсутствует свойство \"text\", возвращаем его без изменений\n  if (!item.json.text) return item;\n  \n  const parsedData = parseInput(item.json.text);\n  // Объединяем результат парсинга с остальными колонками исходного объекта.\n  const newJson = { ...item.json, ...parsedData };\n  \n  return { json: newJson };\n});\n\n// Возвращаем данные в формате, ожидаемом n8n: массив объектов с полем json\nreturn newItems;\n"
      },
      "name": "LG call Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        2320,
        1800
      ],
      "id": "046ba4dc-f23e-4a99-bad6-f3ae2c66f824"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q",
          "mode": "list",
          "cachedResultName": "Processed Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Date": "={{ $json.start.dateTime }}",
            "Company name": "={{ $json.summary }}",
            "Message ID": "={{ $json.id }}",
            "Extracted Link": "={{ $json.googleDocUrl }}",
            "Only link": "={{ $json.documentId }}",
            "Calendar description": "={{ $json.description }}",
            "Manager": "={{ $json.Manager }}",
            "Comment": "={{ $json.Comment }}",
            "Company Info": "={{ $json['Company Info'] }}",
            "Target Audience": "={{ $json['Target Audience'] }}",
            "Country-Location": "={{ $json['Country-Location'] }}",
            "Speciality": "={{ $json.Speciality }}",
            "Contact person": "={{ $json['Contact Person'] }}",
            "Company website": "={{ $json['Company Website'] }}"
          },
          "matchingColumns": [
            "Date"
          ],
          "schema": [
            {
              "id": "Message ID",
              "displayName": "Message ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Extracted Link",
              "displayName": "Extracted Link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Only link",
              "displayName": "Only link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Extracred Text",
              "displayName": "Extracred Text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Company name",
              "displayName": "Company name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Calendar description",
              "displayName": "Calendar description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Company website",
              "displayName": "Company website",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Contact person",
              "displayName": "Contact person",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Speciality",
              "displayName": "Speciality",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Country-Location",
              "displayName": "Country-Location",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Target Audience",
              "displayName": "Target Audience",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Company Info",
              "displayName": "Company Info",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Comment",
              "displayName": "Comment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Manager",
              "displayName": "Manager",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        2560,
        1800
      ],
      "id": "cce6fd81-a6b7-4813-8b9a-789cf0687ef1",
      "name": "LG call Sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JWf1dYTj83NVJtf5",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "documentURL": "={{ $json[\"Only link\"] }}"
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        2880,
        1800
      ],
      "id": "3334e1ca-8ea5-47b7-82a0-bcbb897198c9",
      "name": "LG call Doc",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "UGRtdL18RWBWUBkv",
          "name": "Google Docs Sales API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем все входящие элементы\nconst items = $input.all();\n\n// Создаем копию массива и разворачиваем его\nconst reversedItems = items.slice().reverse();\n\n// Возвращаем перевернутый массив\nreturn reversedItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3180,
        1800
      ],
      "id": "8217897a-4188-476a-bd58-8eaa5bb3dbf0",
      "name": "LG call reverse Code"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q",
          "mode": "list",
          "cachedResultName": "Processed Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Only link": "={{ $json.documentId }}",
            "Extracred Text": "={{ $json.content }}"
          },
          "matchingColumns": [
            "Only link"
          ],
          "schema": [
            {
              "id": "Message ID",
              "displayName": "Message ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Date",
              "displayName": "Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Extracted Link",
              "displayName": "Extracted Link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Only link",
              "displayName": "Only link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Extracred Text",
              "displayName": "Extracred Text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        3440,
        1800
      ],
      "id": "1c243d0f-0868-472a-8400-dbe86cb79233",
      "name": "LG call Append",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JWf1dYTj83NVJtf5",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q",
          "mode": "list",
          "cachedResultName": "Processed Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Emails",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Nk3nPUBoHUEAJCNT3Cx0Vn0Rcopy7znSixDwEufZa8Q/edit#gid=0"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Company name",
              "lookupValue": "={{ $('LG call Sheet').item.json[\"Company name\"] }}"
            },
            {
              "lookupColumn": "Message ID",
              "lookupValue": "={{ $('LG call Sheet').item.json[\"Message ID\"] }}"
            },
            {
              "lookupColumn": "Date",
              "lookupValue": "={{ $('LG call Sheet').item.json.Date }}"
            },
            {
              "lookupColumn": "Only link",
              "lookupValue": "={{ $('LG call Sheet').item.json[\"Only link\"] }}"
            },
            {
              "lookupColumn": "Extracted Link",
              "lookupValue": "={{ $('LG call Sheet').item.json[\"Extracted Link\"] }}"
            },
            {
              "lookupColumn": "Calendar description",
              "lookupValue": "={{ $('LG call Sheet').item.json[\"Calendar description\"] }}"
            },
            {
              "lookupColumn": "Company website",
              "lookupValue": "={{ $('LG call Sheet').item.json['Company website'] }}"
            },
            {
              "lookupColumn": "Contact person",
              "lookupValue": "={{ $('LG call Sheet').item.json['Contact person'] }}"
            },
            {
              "lookupColumn": "Speciality",
              "lookupValue": "={{ $('LG call Sheet').item.json.Speciality }}"
            },
            {
              "lookupColumn": "Country-Location",
              "lookupValue": "={{ $('LG call Sheet').item.json['Country-Location'] }}"
            },
            {
              "lookupColumn": "Target Audience",
              "lookupValue": "={{ $('LG call Sheet').item.json['Target Audience'] }}"
            },
            {
              "lookupColumn": "Company Info",
              "lookupValue": "={{ $('LG call Sheet').item.json['Company Info'] }}"
            },
            {
              "lookupColumn": "Comment",
              "lookupValue": "={{ $('LG call Sheet').item.json.Comment }}"
            },
            {
              "lookupColumn": "Manager",
              "lookupValue": "={{ $('LG call Sheet').item.json.Manager }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        3660,
        1800
      ],
      "id": "e480adf8-d6c7-48b2-b03c-03692dc61e5d",
      "name": "LG call Read",
      "alwaysOutputData": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "JWf1dYTj83NVJtf5",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Familiarize yourself with the list of employees and their roles who may be mentioned from our side in the transcription (they may not be):\n    * Sales Manager: Sona G, Niko K, Sabina H, Anastasia K\n    * Lead generator: Anna Bu, Anahit O, Evgeniya N, Firuza D, Irina Kl, Karina N, Liliia N, Mykhailo Ne, Olena A, Sofiya L, Yelyzaveta P\n    * Financial manager: Daria Y\n    * Front End Developer: Artem S, Maxim S\n    * Graphic Designer: Anastasiya P, Natalia L\n    * Illustrator: Vilhelm S\n    * PPC Specialist: Ekaterina E\n    * prompt engineer: Danylo I, Mykola S\n    * Recruiter: Anastasiya F, Ganna A, Sabina H\n    * UI UX designer: Kristina Y\n    * Video Editor: Dariya A, Svyatoslav Pod\n\nFind mentions of employee names from the list above in the transcription. Important: search specifically for full names or last names as listed and insert them into the appropriate fields.\nIn the Contact Person field, put the name from the call that is not found in the employee list I provided. If there is no information for any field, leave an empty line after \"example: \".\n\nExtract information from the following call transcription and fill in the report template below.\n\nWhat you need to add to the \"Comment: \" - Summarize the call that took place with a client using this call script. Write a paragraph emphasizing client's hiring needs - the position that he wants to fill. End the paragraph with the agreed future steps. Also, write separately the responsibilities and skills required for the position that the client wants to fill.\n\nCall Transcription:\n{{ $json['Extracred Text'] }}\n\nReport Template:\nCompany Name: {{ $json['Company name'] }}\n\nCompany Website: {{ $json['Company website'] }}\n\nContact Person: {{ $json['Contact person'] }}\n\nSpeciality: {{ $json.Speciality }}\n\nCountry-Location: {{ $json['Country-Location'] }}\n\nTarget Audience: {{ $json['Target Audience'] }}\n\nCompany Info: {{ $json['Company Info'] }}\n\nComment: \n\nFormat the answer exactly according to the template, leaving an **empty** line between the field and the value."
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        3960,
        1780
      ],
      "id": "b1406f21-66af-4629-a793-824679538a41",
      "name": "LG call report"
    },
    {
      "parameters": {
        "jsCode": "// Примерный кусок кода, где мы объединяем тексты и параллельно\n// при помощи регулярного выражения извлекаем 'Company Name'\n\nconst combinedText = (items[0].json.text || '') + ' ' + (items[1].json.text || '');\n\n// Задаём регэксп (пример для \"Company Name: …\"), который ловит всё, что идет\n// после \"Company Name:\" до конца строки или до знака переноса/запятой и т.п.\n// В данном случае используем схему \"Company Name:\" + произвольный текст до конца строки.\nconst companyRegex = /Company\\s+Name:\\s*([^\\r\\n]+)/i;\n\n// Пытаемся найти совпадение\nconst match = combinedText.match(companyRegex);\n\n// Если совпадение найдено, берём группу (подмаску) №1, иначе пустая строка\nconst companyName = match && match[1] ? match[1].trim() : '';\n\nreturn [\n  {\n    json: {\n      // Полный текст, как раньше\n      text: combinedText,\n      // Добавляем отдельную колонку с именем компании\n      companyName: companyName,\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4740,
        1820
      ],
      "id": "29a98b0d-7749-470e-9d30-41ff86e146fd",
      "name": "Find Company name"
    },
    {
      "parameters": {
        "operation": "createFromText",
        "content": "={{ $json.text }}",
        "name": "={{ $json.companyName }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "https://drive.google.com/drive/folders/1Ehx183d_STnd3-vi-74T8AwFFXW2lPM8",
          "mode": "url"
        },
        "options": {
          "convertToGoogleDocument": true
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        5060,
        1820
      ],
      "id": "9a044c7e-677d-4234-b4dd-fb4108bd6b00",
      "name": "Add LG Call to Google Drive",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "FVL3R6UcDkQOqfdz",
          "name": "n8n Sales Google Drive"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем значение id из первого элемента входящих данных\nconst id = $input.first().json.id;\n\n// Формируем ссылку на Google Документ, подставляя id\nconst googleDocLink = `https://docs.google.com/document/d/${id}`;\n\n// Возвращаем объект с новым полем, содержащим ссылку на документ\nreturn [\n  {\n    json: {\n      id: id,\n      googleDocLink: googleDocLink,\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5300,
        1820
      ],
      "id": "0a3c9881-fc6d-4f6d-b1db-5d11398e5ef1",
      "name": "Add Full Link to the LG call"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "get",
        "documentURL": "={{ $json.id }}"
      },
      "name": "Get LG call text for discord",
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 1,
      "position": [
        5600,
        1820
      ],
      "id": "8df4c1f9-2725-4175-bd22-1a5d187f713e",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "UGRtdL18RWBWUBkv",
          "name": "Google Docs Sales API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items\nfor (const item of $input.all()) {\n  // Достаём documentId и формируем полную ссылку\n  const docId = item.json.documentId;\n  const googleDocLink = `https://docs.google.com/document/d/${docId}`;\n\n  // Достаём content и ищем в нём Company Name\n  const content = item.json.content || '';\n  // С помощью RegExp ищем строку: \"Company Name: ....\"\n  const companyNameMatch = content.match(/Company Name:\\s*(.*)/i);\n  const companyName = companyNameMatch ? companyNameMatch[1].trim() : 'Not found';\n\n  // Добавляем новые поля к исходным данным\n  item.json.googleDocLink = googleDocLink;\n  item.json.companyName = companyName;\n}\n\nreturn $input.all();\n"
      },
      "name": "Format Final Output for discord",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5860,
        1820
      ],
      "id": "1dd3e742-1c18-4e51-9578-4025836d269f"
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "732698343951695963",
          "mode": "list",
          "cachedResultName": "Remote Helpers",
          "cachedResultUrl": "https://discord.com/channels/732698343951695963"
        },
        "channelId": {
          "__rl": true,
          "value": "1372903833667375145",
          "mode": "list",
          "cachedResultName": "sales-bot",
          "cachedResultUrl": "https://discord.com/channels/732698343951695963/1372903833667375145"
        },
        "content": "=Report after call with company {{ $json.companyName }}:\n{{ $json.googleDocLink }}",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        6140,
        1820
      ],
      "id": "3877fada-235f-4341-8ca7-460460c361a0",
      "name": "LG call send to Sales Comment",
      "webhookId": "0dd4c953-a86e-41eb-9258-01d9a011e87a",
      "credentials": {
        "discordBotApi": {
          "id": "oEHKlFa6ZgVOyl6U",
          "name": "DD discord Report bot"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        4380,
        1800
      ],
      "id": "c2df71da-33da-4f9f-9200-4c6b1ad7c5cf",
      "name": "Merge LLMs of LG call"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "formattedTime",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1800,
        1080
      ],
      "id": "a3828be6-9cca-4439-b9b0-592f2ed1ff5b",
      "name": "Merge Gmail-Calendar and LLM"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "formattedTime",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1520,
        1060
      ],
      "id": "0be5e4dd-93b5-4072-80fb-3f7b2ab0eb8b",
      "name": "Merge Gmail and Calendar"
    },
    {
      "parameters": {
        "jsCode": "/**\n * n8n Code Node Script: Обрабатывает МНОЖЕСТВО входных элементов (items).\n * Для КАЖДОГО элемента берет текст из item.json.text,\n * обрабатывает его как единый блок и извлекает время из его конца.\n * Возвращает массив, содержащий один обработанный объект для КАЖДОГО\n * успешно обработанного входного элемента.\n */\n\n// --- Выполнение скрипта в n8n ---\n\n// Массив для хранения результатов обработки КАЖДОГО элемента\nconst outputItems = [];\n\n// 1. Перебираем КАЖДЫЙ элемент (item), который пришел в узел Code\nfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n  const item = items[itemIndex]; // Текущий обрабатываемый элемент\n  console.log(`Обработка элемента ${itemIndex + 1} из ${items.length}`);\n\n  // 2. Проверяем, содержит ли ТЕКУЩИЙ элемент нужные данные\n  if (!item || !item.json || typeof item.json.text === 'undefined') {\n    console.warn(`Элемент ${itemIndex + 1} пропущен: данные отсутствуют или имеют неверный формат (ожидается item.json.text).`);\n    // Пропускаем этот элемент и переходим к следующему\n    continue;\n  }\n\n  // 3. Получаем текст для ТЕКУЩЕГО элемента и убираем пробелы\n  const inputText = String(item.json.text || \"\").trim();\n\n  if (!inputText) {\n    console.warn(`Элемент ${itemIndex + 1} пропущен: текст пуст после очистки пробелов.`);\n    continue; // Переходим к следующему элементу\n  }\n  // console.log(`Текст элемента ${itemIndex + 1} (фрагмент):`, inputText.substring(0, 200));\n\n  // 4. Обрабатываем текст ТЕКУЩЕГО элемента\n  let formattedTime = null;\n  let textContent = inputText; // По умолчанию текст - это весь inputText для этого элемента\n\n  // Ищем время ЧЧ:ММ в конце текста ТЕКУЩЕГО элемента\n  const timeRegex = /\\n\\s*(\\d{1,2}:\\d{2})\\s*$/;\n  const timeMatch = inputText.match(timeRegex);\n\n  if (timeMatch) {\n    // Если время найдено в конце текста этого элемента:\n    formattedTime = timeMatch[1]; // Извлекаем время ЧЧ:ММ\n    const timeStartIndex = inputText.lastIndexOf(timeMatch[0]); // Находим начало \"\\n...ЧЧ:ММ\"\n    // Текст - это всё ДО этой строки времени\n    textContent = inputText.substring(0, timeStartIndex).trim();\n    // console.log(`Элемент ${itemIndex + 1}: Найдено время '${formattedTime}'.`);\n  } else {\n    // Если время в конце текста этого элемента не найдено\n    // console.warn(`Элемент ${itemIndex + 1}: Время в конце текста не найдено.`);\n  }\n\n  // 5. Создаем выходной объект для ТЕКУЩЕГО элемента\n  //    Важно: создаем новый объект, чтобы не изменять исходный item напрямую\n  const outputItem = {\n    json: {\n      // Сначала копируем все существующие поля из json исходного элемента (если нужно)\n      // ...item.json,\n      // Затем добавляем/перезаписываем наши поля\n      text: textContent,\n      formattedTime: formattedTime\n    }\n    // Если нужно скопировать бинарные данные (файлы), раскомментируйте:\n    // binary: item.binary\n  };\n   // Если НЕ нужно копировать остальные поля из item.json, используйте только:\n   /*\n   const outputItem = {\n     json: {\n       text: textContent,\n       formattedTime: formattedTime\n     }\n   };\n   */\n\n\n  // 6. Добавляем обработанный объект в наш массив результатов\n  outputItems.push(outputItem);\n  console.log(`Элемент ${itemIndex + 1} успешно обработан.`);\n\n} // Конец цикла for по элементам (items)\n\n// 7. ЯВНО возвращаем МАССИВ со всеми обработанными элементами для n8n\nconsole.log(`Возвращаем ${outputItems.length} обработанных элементов в n8n.`);\nreturn outputItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1320,
        1300
      ],
      "id": "44dc8061-f4d3-4440-a251-7718c04db1d4",
      "name": "Parse data in Calendar bio"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Доставай из {{ $json.description }} следующие значения и выводи каждую информацию как отдельный столбик (поле) не пиши в табличном виде, пиши в формате название поля: название того что в ней\n\n\"Company Website\": extractField(description, \"Company Website\"), (НЕ ПИШИ rh-s.com, если другой ссылки нету - оставь пустоту)\n\"Contact Person\": extractField(description, \"Contact Person\"),\nSpeciality\": extractField(description, \"Speciality\"),\nCountry-Location\": extractField(description, \"Country-Location\"),\nTarget Audience\": extractField(description, \"Target Audience\"),\nCompany Info\": extractField(description, \"Company Info\"),\nComment\": extractField(description, \"Comment\"),\nManager\": extractField(description, \"Manager\") \nТакже с новой строки выводи и {{ $json.formattedTime }}\n\nПример \nCompany Website: example.com\n\n\n\n\n"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        860,
        1300
      ],
      "id": "e9784c31-8f30-465f-a8a0-fa2d1a3b9d18",
      "name": "Description in Calendar"
    },
    {
      "parameters": {
        "functionCode": "// Функция для округления времени до ближайшего полчасового интервала (с использованием UTC)\n// Если минуты меньше 30, округляем до :30, иначе до начала следующего часа\nfunction getHalfHourBlockUTC(dateString) {\n  const dateObj = new Date(dateString);\n  if (isNaN(dateObj.getTime())) return \"\";\n  let hours = dateObj.getUTCHours();\n  const minutes = dateObj.getUTCMinutes();\n  \n  if (minutes < 30) {\n    return `${String(hours).padStart(2, '0')}:30`;\n  } else {\n    hours = hours + 1;\n    if (hours === 24) {\n      hours = 0;\n    }\n    return `${String(hours).padStart(2, '0')}:00`;\n  }\n}\n\n// Этап 1. Получаем все входящие элементы и проводим обработку полей summary, description и end\nconst items = $input.all();\n\n// Проверяем, что items – массив\nif (!Array.isArray(items)) {\n  throw new Error(\"Ожидался массив входящих элементов\");\n}\n\nconst tempResults = items.map(item => {\n  // Если структура не соответствует ожиданиям, пропускаем элемент\n  if (!item || !item.json) return null;\n  \n  const jsonData = item.json;\n  \n  // Извлекаем поля summary и description, остальные поля сохраняем в restFields\n  const summary = jsonData.summary || \"\";\n  const description = jsonData.description || \"Нет описания\";\n  \n  // Очищаем поле summary: удаляем подстроку \"- Remote Helpers\" (без учета регистра)\n  let cleanedSummary = summary.replace(/-\\s*Remote\\s*Helpers\\s*/gi, \"\").trim();\n  \n  // Получаем оригинальное время окончания из jsonData.end\n  let originalEnd = \"\";\n  if (jsonData.end) {\n    originalEnd = jsonData.end.dateTime || jsonData.end.date || \"\";\n  }\n  \n  // Форматируем время окончания в формате HH:MM (округление до ближайшего полчасового интервала)\n  const formattedTime = originalEnd ? getHalfHourBlockUTC(originalEnd) : \"\";\n  \n  // Формируем итоговый объект.\n  // Сохраняем оригинальное время окончания (_originalEnd) для фильтрации и сортировки.\n  const finalData = {\n    ...jsonData,\n    summary: cleanedSummary,\n    description: description,\n    formattedTime: formattedTime,  // переименованное значение end\n    _originalEnd: originalEnd\n  };\n  \n  return { json: finalData };\n})\n// Фильтруем элементы, у которых не удалось сформировать объект\n.filter(item => item !== null);\n\n// Этап 2. Фильтрация дубликатов с использованием комбинации summary и округленного времени (UTC)\n// Используем _originalEnd для определения уникальности\nconst seenKeys = new Set();\nconst uniqueResults = tempResults.filter(item => {\n  const currentSummary = item.json.summary;\n  const originalEndTime = item.json._originalEnd;\n  \n  // Если время окончания задано, округляем его по UTC, иначе оставляем пустую строку\n  const normalizedTime = originalEndTime ? getHalfHourBlockUTC(originalEndTime) : \"\";\n  \n  // Если у события есть уникальный id, используем его; иначе – комбинацию summary и нормализованного времени\n  const uniqueId = item.json.id;\n  const dedupKey = uniqueId ? uniqueId : `${currentSummary}__${normalizedTime}`;\n  \n  if (seenKeys.has(dedupKey)) {\n    return false;\n  } else {\n    seenKeys.add(dedupKey);\n    return true;\n  }\n});\n\n// Этап 3. Сортировка по оригинальному времени окончания (используя _originalEnd)\nuniqueResults.sort((a, b) => {\n  const timeA = new Date(a.json._originalEnd);\n  const timeB = new Date(b.json._originalEnd);\n  return timeA - timeB;\n});\n\n// Инвертируем порядок элементов, чтобы вывод был снизу вверх\nuniqueResults.reverse();\n\n// Удаляем вспомогательное поле _originalEnd из финального вывода\nconst finalResults = uniqueResults.map(item => {\n  delete item.json._originalEnd;\n  return item;\n});\n\n// Возвращаем итоговый массив уникальных, отсортированных по времени окончания\nreturn finalResults;\n"
      },
      "name": "Format data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        140,
        1020
      ],
      "id": "272b2cef-7265-4d1d-a867-0f6f2a566a3f"
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "sales@rh-s.com",
          "mode": "list",
          "cachedResultName": "sales@rh-s.com"
        },
        "limit": 5,
        "timeMin": "={{ $now.minus( {hours: 1, minutes: 30} ) }}",
        "timeMax": "={{ $now }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -140,
        1000
      ],
      "id": "9aae3266-5e50-4467-890e-b84822edc72e",
      "name": "Find Calendar meetings from now to minus 2 hours",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "dCmWpdsYiSYHC7XA",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "5a742060-4452-4221-8d68-05aa654ef2e2",
              "leftValue": "={{ $json.formattedTime }}",
              "rightValue": "={{ $json.summary }}",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        640,
        660
      ],
      "id": "128001cc-1484-4bff-ab0f-59873fe272c0",
      "name": "If formatted data empty - do nothing"
    },
    {
      "parameters": {
        "jsCode": "// Функция для округления времени до ближайшего полчасового интервала (с использованием UTC)\n// Если минуты меньше 30, округляем до :30, иначе до начала следующего часа\nfunction getHalfHourBlockUTC(dateString) {\n  const dateObj = new Date(dateString);\n  if (isNaN(dateObj.getTime())) return \"\";\n  let hours = dateObj.getUTCHours();\n  const minutes = dateObj.getUTCMinutes();\n  \n  if (minutes < 30) {\n    return `${String(hours).padStart(2, '0')}:30`;\n  } else {\n    hours = hours + 1;\n    if (hours === 24) {\n      hours = 0;\n    }\n    return `${String(hours).padStart(2, '0')}:00`;\n  }\n}\n\n// Этап 1. Получаем все входящие элементы и проводим обработку полей summary, description и date\nconst items = $input.all();\n\n// Проверяем, что items – массив\nif (!Array.isArray(items)) {\n  throw new Error(\"Ожидался массив входящих элементов\");\n}\n\nconst tempResults = items.map(item => {\n  // Если структура не соответствует ожиданиям, пропускаем элемент\n  if (!item || !item.json) return null;\n  \n  const jsonData = item.json;\n  \n  // Извлекаем поля summary и description, остальные поля сохраняем в restFields\n  const summary = jsonData.summary || \"\";\n  const description = jsonData.description || \"Нет описания\";\n  \n  // Очищаем поле summary: удаляем подстроку \"- Remote Helpers\" (без учета регистра)\n  let cleanedSummary = summary.replace(/-\\s*Remote\\s*Helpers\\s*/gi, \"\").trim();\n  \n  // Получаем оригинальное время события из jsonData.date\n  const originalTime = jsonData.date || \"\";\n  \n  // Форматируем время в формате HH:MM (округление до ближайшего полчасового интервала)\n  const formattedTime = originalTime ? getHalfHourBlockUTC(originalTime) : \"\";\n  \n  // Формируем итоговый объект.\n  // Сохраняем оригинальное время (_originalTime) для фильтрации и сортировки.\n  const finalData = {\n    ...jsonData,\n    summary: cleanedSummary,\n    description: description,\n    formattedTime: formattedTime,  // добавленное поле с округленным временем\n    _originalTime: originalTime\n  };\n  \n  return { json: finalData };\n})\n// Фильтруем элементы, у которых не удалось сформировать объект\n.filter(item => item !== null);\n\n// Этап 2. Фильтрация дубликатов с использованием комбинации summary и округленного времени (UTC)\nconst seenKeys = new Set();\nconst uniqueResults = tempResults.filter(item => {\n  const currentSummary = item.json.summary;\n  const originalTimeValue = item.json._originalTime;\n  \n  // Если время события задано, округляем его по UTC, иначе оставляем пустую строку\n  const normalizedTime = originalTimeValue ? getHalfHourBlockUTC(originalTimeValue) : \"\";\n  \n  // Если у события есть уникальный id, используем его; иначе – комбинацию summary и нормализованного времени\n  const uniqueId = item.json.id;\n  const dedupKey = uniqueId ? uniqueId : `${currentSummary}__${normalizedTime}`;\n  \n  if (seenKeys.has(dedupKey)) {\n    return false;\n  } else {\n    seenKeys.add(dedupKey);\n    return true;\n  }\n});\n\n// Этап 3. Сортировка по оригинальному времени события (используя _originalTime)\nuniqueResults.sort((a, b) => {\n  const timeA = new Date(a.json._originalTime);\n  const timeB = new Date(b.json._originalTime);\n  return timeA - timeB;\n});\n\n// Этап 4. Фильтрация событий, оставляем только те, которые произошли в течение последнего часа\nconst oneHour = 60 * 60 * 1 * 1000; // 1 час в миллисекундах\nconst now = new Date();\n\nconst filteredResults = uniqueResults.filter(item => {\n  const eventTime = new Date(item.json.date);\n  // Проверяем, что событие уже прошло и разница между текущим временем и временем события не превышает 1 час\n  return eventTime <= now && (now - eventTime) <= oneHour;\n});\n\n// Удаляем вспомогательное поле _originalTime из финального вывода\nconst finalResults = filteredResults.map(item => {\n  delete item.json._originalTime;\n  return item;\n});\n\n// Возвращаем итоговый массив уникальных, отсортированных по времени события,\n// которые произошли в течение последнего часа\nreturn finalResults;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        660
      ],
      "id": "6fdfa22d-2be9-42e3-bccd-95cee82c41dd",
      "name": "Messages that was from now to 1 hour ago"
    },
    {
      "parameters": {
        "jsCode": "// Получаем все входящие элементы\nconst items = $input.all();\n\n// Преобразуем каждый входящий элемент\nconst results = items.map(item => {\n  // Извлекаем необходимые поля\n  const subject = item.json.subject || \"\";\n  const date = item.json.headers?.date || item.json.date || \"\";\n  const messageId = item.json.id || \"\";\n  const html = item.json.html || \"\";\n  const text = item.json.text || \"\";\n\n  // Извлекаем ссылку на Google Документ из источника (используем html, а если его нет — text)\n  let googleDocUrl = null;\n  let documentId = null;\n  {\n    const sourceForDoc = html || text;\n    const docRegex = /(https:\\/\\/docs\\.google\\.com\\/document\\/d\\/[\\w-]+)/;\n    const docMatch = sourceForDoc.match(docRegex);\n    if (docMatch && docMatch[0]) {\n      googleDocUrl = docMatch[0];\n      // Удаляем \"/edit\" и параметры, если они присутствуют\n      googleDocUrl = googleDocUrl.split('/edit')[0].split('?')[0];\n      \n      // Извлекаем ID документа из URL\n      const idRegex = /\\/d\\/([\\w-]+)/;\n      const idMatch = googleDocUrl.match(idRegex);\n      documentId = idMatch && idMatch[1] ? idMatch[1] : null;\n    }\n  }\n\n  // Название встречи равно значению subject\n  const meetingName = subject;\n\n  // Форматируем дату в ISO-формат, если возможно\n  let formattedDate = date;\n  if (date) {\n    try {\n      formattedDate = new Date(date).toISOString();\n    } catch (e) {\n      // В случае ошибки оставляем исходное значение\n    }\n  }\n\n  // Собираем итоговый объект с извлечёнными данными\n  const extractedData = {\n    messageId: messageId,\n    date: formattedDate,\n    googleDocUrl: googleDocUrl,\n    documentId: documentId,\n    meetingName: meetingName // Извлекаем название встречи из subject\n  };\n\n  return { json: extractedData };\n});\n\n// Возвращаем массив объектов\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        120,
        660
      ],
      "id": "ba8759c0-3aa5-43a9-9de2-7db91dbb9931",
      "name": "Extract useful data for scrapping and merging"
    },
    {
      "parameters": {
        "operation": "getAll",
        "limit": 10,
        "simple": false,
        "filters": {
          "q": "subject:Meeting records:",
          "sender": "meetings-noreply@google.com"
        },
        "options": {
          "downloadAttachments": true
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -140,
        780
      ],
      "id": "f72f84c9-78be-4ea7-bcc8-2e5089a274a7",
      "name": "Find Gmails from meetings-noreply",
      "webhookId": "fd589834-de5f-4a43-9809-04de4bcc6b08",
      "credentials": {
        "gmailOAuth2": {
          "id": "s09JnuCcx9ezdMBU",
          "name": "Sales N8N gmail "
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -420,
        900
      ],
      "id": "e31bb397-adde-4bb6-b659-918afe70c665",
      "name": "1 Hour Trigger"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2980,
        1080
      ],
      "id": "3367fd03-eafd-43e5-a433-ddb73eaf02c6",
      "name": "Merge"
    },
    {
      "parameters": {
        "resource": "message",
        "guildId": {
          "__rl": true,
          "value": "732698343951695963",
          "mode": "list",
          "cachedResultName": "Remote Helpers",
          "cachedResultUrl": "https://discord.com/channels/732698343951695963"
        },
        "channelId": {
          "__rl": true,
          "value": "1285235052615176263",
          "mode": "id"
        },
        "content": "=Report after Intro call with company {{ $json.extractedText }}:\n{{ $json.text }}",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        4080,
        1040
      ],
      "id": "746c2ed0-d5b9-45db-bbb9-b70b5fc2d31c",
      "name": "Intro Call send to Sales Comment1",
      "webhookId": "0dd4c953-a86e-41eb-9258-01d9a011e87a",
      "credentials": {
        "discordBotApi": {
          "id": "oEHKlFa6ZgVOyl6U",
          "name": "DD discord Report bot"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем входной текст (предположим, что данные находятся в поле 'content')\nconst inputText = $json.content;\n\n// Используем регулярное выражение для извлечения текста до \" - Intro call\"\nconst match = inputText.match(/^(.*?) - Intro call/);\n\n// Если совпадение найдено, возвращаем текст до \"- Intro call\"\nif (match) {\n  return [{ json: { extractedText: match[1].trim() } }];\n} else {\n  // Если совпадение не найдено, возвращаем сообщение об ошибке\n  return [{ json: { extractedText: \"Текст до '- Intro call' не найден\" } }];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3540,
        1120
      ],
      "id": "bc0eaaa4-600f-4722-b28b-1bd161ddfff2",
      "name": "Intro call reverse code1"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        3860,
        1040
      ],
      "id": "f76bb255-944b-4f80-90b2-1699af2b3f0c",
      "name": "Merge1"
    }
  ],
  "connections": {
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "LG call report",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Description in Calendar",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Usefull information about client",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Usefull information about client": {
      "main": [
        [
          {
            "node": "Merge LLMs of LG call",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "If meeting name contains Interview",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "If meeting name contains Second call",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "If meeting name contains follow up",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Follow Up. Extract Calendar Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Interview",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Second Call",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Intro call",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Intorductory call",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Kick off call",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "LG call Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Follow Up Report",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Usefull information about Follow Up",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code9": {
      "main": [
        [
          {
            "node": "Google Drive1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Code9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Drive1": {
      "main": [
        [
          {
            "node": "Code10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code10": {
      "main": [
        [
          {
            "node": "Get Google Doc Metadata1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Google Doc Metadata1": {
      "main": [
        [
          {
            "node": "Format Final Output1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Follow Up. Extract Calendar Data": {
      "main": [
        []
      ]
    },
    "Interview": {
      "main": [
        []
      ]
    },
    "Interview Sheet": {
      "main": [
        [
          {
            "node": "Interview Doc",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Interview Doc": {
      "main": [
        [
          {
            "node": "Interview reverse code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Interview reverse code": {
      "main": [
        [
          {
            "node": "Interview Append",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Interview Append": {
      "main": [
        [
          {
            "node": "Interview Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Interview Report",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model6": {
      "ai_languageModel": [
        [
          {
            "node": "Intro Call Report",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Intro call": {
      "main": [
        [
          {
            "node": "Intro call Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Intro call Sheet": {
      "main": [
        [
          {
            "node": "Intro call Doc",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Intro call Doc": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Intro call reverse code": {
      "main": [
        [
          {
            "node": "Intro Call Report",
            "type": "main",
            "index": 0
          },
          {
            "node": "Intro call reverse code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Interview Read": {
      "main": [
        [
          {
            "node": "Interview Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Follow Up Sheet": {
      "main": [
        [
          {
            "node": "Follow Up Doc",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Follow Up Doc": {
      "main": [
        [
          {
            "node": "Follow Up reverse Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Follow Up reverse Code": {
      "main": [
        [
          {
            "node": "Follow Up Append",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Follow Up Append": {
      "main": [
        [
          {
            "node": "Follow Up Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Follow Up Read": {
      "main": [
        [
          {
            "node": "Follow Up Report",
            "type": "main",
            "index": 0
          },
          {
            "node": "Usefull information about Follow Up",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Follow Up Report": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Usefull information about Follow Up": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "OpenRouter Chat Model7": {
      "ai_languageModel": [
        [
          {
            "node": "Intorductory Report",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Intorductory call": {
      "main": [
        []
      ]
    },
    "Intorductory Sheet": {
      "main": [
        [
          {
            "node": "Intorductory Doc",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Intorductory Doc": {
      "main": [
        [
          {
            "node": "Intorductory reverse Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Intorductory reverse Code": {
      "main": [
        [
          {
            "node": "Intorductory Append",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Intorductory Append": {
      "main": [
        [
          {
            "node": "Intorductory Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Intorductory Read": {
      "main": [
        [
          {
            "node": "Intorductory Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Kick off call": {
      "main": [
        []
      ]
    },
    "OpenRouter Chat Model8": {
      "ai_languageModel": [
        [
          {
            "node": "Kick off Report",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Kick off Sheet": {
      "main": [
        [
          {
            "node": "Kick off Doc",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Kick off Doc": {
      "main": [
        [
          {
            "node": "Kick off reverse Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Kick off reverse Code": {
      "main": [
        [
          {
            "node": "Kick off Append",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Kick off Append": {
      "main": [
        [
          {
            "node": "Kick off Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Kick off Read": {
      "main": [
        [
          {
            "node": "Kick off Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LG call Data": {
      "main": [
        [
          {
            "node": "LG call Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LG call Sheet": {
      "main": [
        [
          {
            "node": "LG call Doc",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LG call Doc": {
      "main": [
        [
          {
            "node": "LG call reverse Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LG call reverse Code": {
      "main": [
        [
          {
            "node": "LG call Append",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LG call Append": {
      "main": [
        [
          {
            "node": "LG call Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LG call Read": {
      "main": [
        [
          {
            "node": "LG call report",
            "type": "main",
            "index": 0
          },
          {
            "node": "Usefull information about client",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LG call report": {
      "main": [
        [
          {
            "node": "Merge LLMs of LG call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Company name": {
      "main": [
        [
          {
            "node": "Add LG Call to Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add LG Call to Google Drive": {
      "main": [
        [
          {
            "node": "Add Full Link to the LG call",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Full Link to the LG call": {
      "main": [
        [
          {
            "node": "Get LG call text for discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get LG call text for discord": {
      "main": [
        [
          {
            "node": "Format Final Output for discord",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Final Output for discord": {
      "main": [
        [
          {
            "node": "LG call send to Sales Comment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge LLMs of LG call": {
      "main": [
        [
          {
            "node": "Find Company name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Gmail-Calendar and LLM": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Gmail and Calendar": {
      "main": [
        [
          {
            "node": "Merge Gmail-Calendar and LLM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse data in Calendar bio": {
      "main": [
        [
          {
            "node": "Merge Gmail-Calendar and LLM",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Description in Calendar": {
      "main": [
        [
          {
            "node": "Parse data in Calendar bio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format data": {
      "main": [
        [
          {
            "node": "Description in Calendar",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Gmail and Calendar",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Find Calendar meetings from now to minus 2 hours": {
      "main": [
        [
          {
            "node": "Format data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If formatted data empty - do nothing": {
      "main": [
        [
          {
            "node": "If Formatted Data is empty ->",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Gmail and Calendar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Messages that was from now to 1 hour ago": {
      "main": [
        [
          {
            "node": "If formatted data empty - do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract useful data for scrapping and merging": {
      "main": [
        [
          {
            "node": "Messages that was from now to 1 hour ago",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Gmails from meetings-noreply": {
      "main": [
        [
          {
            "node": "Extract useful data for scrapping and merging",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1 Hour Trigger": {
      "main": [
        [
          {
            "node": "Find Gmails from meetings-noreply",
            "type": "main",
            "index": 0
          },
          {
            "node": "Find Calendar meetings from now to minus 2 hours",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Intro call reverse code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Intro Call Report": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Intro call reverse code1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Intro Call send to Sales Comment1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {
    "node:1 Hour Trigger": {
      "recurrenceRules": []
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "cad36a50-4987-44d2-b340-2cf3f851c09e",
  "triggerCount": 1,
  "tags": [
    {
      "createdAt": "2025-03-17T12:52:07.245Z",
      "updatedAt": "2025-03-17T12:52:07.245Z",
      "id": "8gQGu3wLTaddTC1B",
      "name": "report"
    },
    {
      "createdAt": "2025-04-11T07:25:18.150Z",
      "updatedAt": "2025-04-11T07:25:18.150Z",
      "id": "F4yBYHrbQwB5aiFj",
      "name": "Sales"
    }
  ]
}